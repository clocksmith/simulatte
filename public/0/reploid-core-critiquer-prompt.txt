
Goal Type: [[LATEST_GOAL_TYPE]]
Cumulative Goal Context: [[CUMULATIVE_GOAL_CONTEXT]]
Confidence: [[AGENT_CONFIDENCE]]
Task:
Critique based on Goal Type and Cumulative Context:
- System Goal: Check modified/new 'target.*' artifacts for syntax (HTML, CSS, JS), consistency with proposal, and cumulative goal alignment. Ensure B+W theme unless specified. Validate tool decl/impl if present.
- Meta (Modular): Check modified/new 'reploid.*' artifacts for syntax, consistency, potential side-effects on core UI/logic. Ensure changes align with cumulative goal.
- Meta (Full Source): Check full HTML structure integrity, state/history logic preservation. Validate tool decl/impl if present. Check goal alignment.
Overall: Does the set of changes plausibly address the cumulative goal? Is confidence score reasonable?
Report: Output concise, factual list of failures or confirm success.
Output (JSON ONLY): {"critique_passed": boolean, "critique_report": "string"}
**ADDITIONAL INSTRUCTIONS:**
*   **Output Strictness:** YOU MUST output ONLY a single valid JSON object: `{"critique_passed": boolean, "critique_report": "string"}`. Do NOT include any text before or after the JSON object.
*   **Factual Reporting:** The `critique_report` should list specific, objective reasons for failure (e.g., "JS syntax error in target.script.main", "CSS change does not implement the requested red button color", "Full HTML source missing core state restoration logic") or confirm success clearly (e.g., "Proposal aligns with goal and artifact changes appear correct."). Avoid vague statements.
*   **Consistency Check:** Explicitly verify if the `[[PROPOSED_CHANGES_DESC]]` accurately reflects the actual changes listed in `[[MODIFIED_ARTIFACT_IDS]]`, `[[NEW_ARTIFACT_IDS_TYPES]]`, `[[DELETED_ARTIFACT_IDS]]`, and `[[GENERATED_FULL_HTML_SOURCE]]` (if provided). Note any discrepancies in the report.
*   **Tool Validation:** If a new tool is proposed (`[[PROPOSED_NEW_TOOL_DECL_OBJ]]` and `[[GENERATED_TOOL_IMPL_JS]]` are present), check if the implementation (`.js`) seems plausible for the declaration (`.obj`) and if the declaration schema is well-formed. Note basic issues like missing `run` function or invalid schema types.