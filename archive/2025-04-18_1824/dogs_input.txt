--- CATS_START_FILE: boot.js ---
aW1wb3J0IFV0aWxzIGZyb20gIi4vdXRpbHMuanMiOwppbXBvcnQgU3RvcmFnZU1vZHVsZSBmcm9tICIuL3N0b3JhZ2UuanMiOwoKY29uc3QgYm9vdHN0cmFwID0gYXN5bmMgKCkgPT4gewogIGNvbnN0IGxvYWRpbmdDb250YWluZXIgPSBVdGlscy4kaWQoImxvYWRpbmctY29udGFpbmVyIik7CiAgY29uc3QgYm9vdExvZyA9IFV0aWxzLiRpZCgiYm9vdC1sb2ciKTsKICBjb25zdCBhcHBSb290ID0gVXRpbHMuJGlkKCJhcHAtcm9vdCIpOwoKICBjb25zdCBsb2dUb0Jvb3RTY3JlZW4gPSAobGV2ZWwsIG1lc3NhZ2UsIC4uLmRldGFpbHMpID0+IHsKICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTsKICAgIGNvbnN0IGxpbmUgPSBgWyR7dGltZXN0YW1wfV0gWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dICR7bWVzc2FnZX0gJHtkZXRhaWxzCiAgICAgIC5tYXAoKGQpID0+IEpTT04uc3RyaW5naWZ5KGQpKQogICAgICAuam9pbigiICIpfVxuYDsKICAgIGlmIChib290TG9nKSB7CiAgICAgIGJvb3RMb2cudGV4dENvbnRlbnQgKz0gbGluZTsKICAgICAgYm9vdExvZy5zY3JvbGxUb3AgPSBib290TG9nLnNjcm9sbEhlaWdodDsKICAgIH0KCiAgICBjb25zdCBjb25zb2xlTWV0aG9kID0KICAgICAgbGV2ZWwgPT09ICJlcnJvciIKICAgICAgICA/IGNvbnNvbGUuZXJyb3IKICAgICAgICA6IGxldmVsID09PSAid2FybiIKICAgICAgICA/IGNvbnNvbGUud2FybgogICAgICAgIDogY29uc29sZS5sb2c7CiAgICBjb25zb2xlTWV0aG9kKGxpbmUudHJpbSgpKTsKICB9OwoKICBsZXQgY29uZmlnID0gbnVsbDsKICBsZXQgc3RvcmFnZSA9IG51bGw7CiAgbGV0IGxvZ2dlciA9IG51bGw7CgogIHRyeSB7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCAiQm9vdCBzZXF1ZW5jZSBzdGFydGVkLi4uIik7CgogICAgbG9nVG9Cb290U2NyZWVuKCJpbmZvIiwgIkZldGNoaW5nIGNvbmZpZ3VyYXRpb24uLi4iKTsKICAgIGNvbnN0IGNvbmZpZ1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2goImNvbmZpZy5qc29uIik7CiAgICBpZiAoIWNvbmZpZ1Jlc3BvbnNlLm9rKQogICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBjb25maWcuanNvbjogJHtjb25maWdSZXNwb25zZS5zdGF0dXN9YCk7CiAgICBjb25maWcgPSBhd2FpdCBjb25maWdSZXNwb25zZS5qc29uKCk7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCBgQ29uZmlndXJhdGlvbiBsb2FkZWQgKHYke2NvbmZpZy52ZXJzaW9ufSlgKTsKCiAgICBVdGlscy5sb2dnZXIuaW5pdChjb25maWcpOwogICAgbG9nZ2VyID0gVXRpbHMubG9nZ2VyOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlV0aWxpdGllcyBhbmQgTG9nZ2VyIGluaXRpYWxpemVkLiIpOwoKICAgIHN0b3JhZ2UgPSBTdG9yYWdlTW9kdWxlKGNvbmZpZywgbG9nZ2VyKTsKICAgIGlmICghc3RvcmFnZSkgdGhyb3cgbmV3IEVycm9yKCJTdG9yYWdlIG1vZHVsZSBpbml0aWFsaXphdGlvbiBmYWlsZWQuIik7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiU3RvcmFnZSBtb2R1bGUgaW5pdGlhbGl6ZWQuIik7CiAgICBjb25zdCB1c2FnZSA9IHN0b3JhZ2UuZ2V0U3RvcmFnZVVzYWdlKCk7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYEluaXRpYWwgc3RvcmFnZSB1c2FnZTogJHsodXNhZ2UudXNlZCAvIDEwMjQpLnRvRml4ZWQoCiAgICAgICAgMQogICAgICApfUtCICgke3VzYWdlLnBlcmNlbnQudG9GaXhlZCgxKX0lKWAKICAgICk7CgogICAgbGV0IHN0YXRlID0gc3RvcmFnZS5nZXRTdGF0ZSgpOwogICAgaWYgKHN0YXRlKSB7CiAgICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBjb25maWcudmVyc2lvbikgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAgICJ3YXJuIiwKICAgICAgICAgIGBTdGF0ZSB2ZXJzaW9uIG1pc21hdGNoIChTdGF0ZTogJHtzdGF0ZS52ZXJzaW9ufSwgQ29uZmlnOiAke2NvbmZpZy52ZXJzaW9ufSkuIFJlLWluaXRpYWxpemluZyBzdGF0ZS5gCiAgICAgICAgKTsKICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgc3RvcmFnZS5yZW1vdmVTdGF0ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsIGBFeGlzdGluZyBzdGF0ZSBmb3VuZCAodiR7c3RhdGUudmVyc2lvbn0pLmApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICAgImluZm8iLAogICAgICAgICJObyBleGlzdGluZyBzdGF0ZSBmb3VuZC4gSW5pdGlhbGl6aW5nIG5ldyBzdGF0ZS4iCiAgICAgICk7CiAgICB9CgogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIkxvYWRpbmcgY29yZSBhcHBsaWNhdGlvbiBtb2R1bGVzLi4uIik7CgogICAgY29uc3QgU3RhdGVNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi9zdGF0ZS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBzdG9yYWdlCiAgICApOwogICAgY29uc3QgQXBpQ2xpZW50ID0gKGF3YWl0IGltcG9ydCgiLi9hcGktY2xpZW50LmpzIikpLmRlZmF1bHQoY29uZmlnLCBsb2dnZXIpOwogICAgY29uc3QgTUNQQ29udmVydGVyID0gKGF3YWl0IGltcG9ydCgiLi9tY3AtY29udmVydGVyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyCiAgICApOwogICAgY29uc3QgVG9vbFJ1bm5lciA9IChhd2FpdCBpbXBvcnQoIi4vdG9vbC1ydW5uZXIuanMiKSkuZGVmYXVsdCgKICAgICAgY29uZmlnLAogICAgICBsb2dnZXIKICAgICk7CiAgICBjb25zdCBDeWNsZUxvZ2ljID0gKGF3YWl0IGltcG9ydCgiLi9jeWNsZS1bG9naWMuanMiKSkuZGVmYXVsdCgKICAgICAgY29uZmlnLAogICAgICBsb2dnZXIsCiAgICAgIFV0aWxzLAogICAgICBzdG9yYWdlLAogICAgICBTdGF0ZU1hbmFnZXIsCiAgICAgIEFwaUNsaWVudCwKICAgICAgTUNQQ29udmVydGVyLAogICAgICBUb29sUnVubmVyCiAgICApOwogICAgY29uc3QgVUlNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi91aS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBVdGlscywKICAgICAgc3RvcmFnZSwKICAgICAgU3RhdGVNYW5hZ2VyLAogICAgICBDeWNsZUxvZ2ljCiAgICApOwoKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJDb3JlIG1vZHVsZXMgbG9hZGVkLiIpOwoKICAgIFN0YXRlTWFuYWdlci5pbml0KHN0YXRlKTsKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJTdGF0ZU1hbmFnZXIgaW5pdGlhbGl6ZWQuIik7CgogICAgQ3ljbGVMb2dpYy5pbml0KCk7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQ3ljbGVMb2dpYyBpbml0aWFsaXplZC4iKTsKCiAgICBhd2FpdCBVSU1hbmFnZXIuaW5pdCgpOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlVJTWFuYWdlciBpbml0aWFsaXplZC4iKTsKCiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQm9vdHN0cmFwIGNvbXBsZXRlLiBMYXVuY2hpbmcgYXBwbGljYXRpb24uIik7CiAgICBpZiAobG9hZGluZ0NvbnRhaW5lcikgbG9hZGluZ0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKICAgIGlmIChhcHBSb290KSBhcHBSb290LmNsYXNzTGlzdC5yZW1vdmUoImhpZGRlbiIpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zdCBlcnJvck1zZyA9IGBGQVRBTCBCT09UU1RSQVAgRVJST1I6ICR7ZXJyb3IubWVzc2FnZX1gOwogICAgbG9nVG9Cb290U2NyZWVuKCJlcnJvciIsIGVycm9yTXNnLCBlcnJvci5zdGFjayk7CgogICAgaWYgKGJvb3RMb2cpIHsKICAgICAgYm9vdExvZy5zdHlsZS5jb2xvciA9ICJ2YXIoLS1lcnJvci1jb2xvcikiOwogICAgICBib290TG9nLnN0eWxlLmJvcmRlckNvbG9yID0gInZhcigtLWVycm9yLWNvbG9yKSI7CiAgICB9CiAgICBpZiAoYXBwUm9vdCkgYXBwUm9vdC5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKCiAgICBpZiAoIWJvb3RMb2cgJiYgbG9hZGluZ0NvbnRhaW5lcikgewogICAgICBsb2FkaW5nQ29udGFpbmVyLmlubmVySFRNTCA9IGA8aDEgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7Ij5Jbml0aWFsaXphdGlvbiBGYWlsZWQ8L2gxPjxwcmUgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7IHRleHQtYWxpZ246IGxlZnQ7IHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsiPiR7ZXJyb3JNc2d9XG4kewogICAgICAgIGVycm9yLnN0YWNrIHx8ICIiCiAgICAgIH08L3ByZT5gOwogICAgfQogIH0KfTsKCmJvb3RzdHJhcCgpOwo=
--- CATS_END_FILE ---

--- CATS_START_FILE: index.html ---
PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiIC8+CiAgICA8dGl0bGU+RHJlYW1lciAoVG9vbCBGYWN0b3J5KTwvdGl0bGU+CiAgICA8bGluawogICAgICByZWw9Imljb24iCiAgICAgIGhyZWY9ImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMTAwIDEwMCclM0UlM0NyZWN0IHdpZHRoPScxMDAnIGhlaWdodD0nMTAwJyByeD0nMTUnIGZpbGw9JyUyM2NjYycvJTNFJTNDcGF0aCBkPSdNMzAgNzAgTDUwIDMwIEw3MCA3MCBaJyBmaWxsPSclMjMzMzMnLyUzRSUzQ3BhdGggZD0nTTQwIDYwIEw2MCA2MCBMNTAgNDUgWicgZmlsbD0nJTIzZmZmJy8lM0UlM0Mvc3ZnJTNFIgogICAgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0idWktc3R5bGUuY3NzIiAvPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxkaXYgaWQ9ImxvYWRpbmctY29udGFpbmVyIj4KICAgICAgPGgxPkxvYWRpbmcgRFJFQU1FUi4uLjwvaDE+CiAgICAgIDxwcmUgaWQ9ImJvb3QtbG9nIj48L3ByZT4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0iYXBwLXJvb3QiIGNsYXNzPSJoaWRkZW4iPjwvZGl2PgogICAgPGRpdiBpZD0ibm90aWZpY2F0aW9ucy1jb250YWluZXIiPjwvZGl2PgoKICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9ImJvb3QuanMiPjwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=
--- CATS_END_FILE ---

--- CATS_START_FILE: state-manager.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: config.json ---
ewogICJhcHBOYW1lIjogIkRyZWFtZXIgVG9vbCBGYWN0b3J5IChEVEYpIiwKICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgInN0b3JhZ2VQcmVmaXgiOiAiX2R0Zl8iLAogICJzdGF0ZUtleUJhc2UiOiAiZHRmX3N0YXRlX3YiLAogICJzZXNzaW9uS2V5QmFzZSI6ICJkdGZfc2Vzc2lvbl92IiwKICAibWF4TG9nRW50cmllcyI6IDEwMDAwLAogICJtYXhBcnRpZmFjdFNpemVCeXRlcyI6IDQxOTQzMDQsCiAgImRlZmF1bHRNb2RlbCI6ICJnZW1pbmktMi41LXByby1leHAtMDMtMjUiLAogICJnZW1pbmlBcGlCYXNlVXJsIjogImh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9tb2RlbHMvIiwKICAiYXBpUmV0cnlEZWxheUJhc2VNcyI6IDE1MDAsCiAgImFwaU1heFJldHJpZXMiOiAyLAogICJ0b29sUnVubmVyVGltZW91dE1zIjogMTUwMDAsCiAgImRlZmF1bHRQcm9tcHRBcnRpZmFjdElkIjogInByb21wdC50b29sLWdlbmVyYXRvci5kZWZhdWx0IiwKICAic3RvcmFnZVF1b3RhQnl0ZXMiOiA1MjQyODgwLAogICJzdG9yYWdlUXVvdGFXYXJuVGhyZXNob2xkIjogMC45Cn0K
--- CATS_END_FILE ---

--- CATS_START_FILE: prompt-tool-generator.txt ---
WW91IGFyZSBhbiBleHBlcnQgdG9vbCBkZXNpZ25lciBhbmQgSmF2YVNjcmlwdCBkZXZlbG9wZXIuIFlvdXIgdGFzayBpcyB0byBjcmVhdGUgQk9USCBhIHZhbGlkIE1DUCAoTW9kZWwgQ29udGV4dCBQcm90b2NvbCkgdG9vbCBkZWZpbml0aW9uIEpTT04gb2JqZWN0IEFORCBhIGZ1bmN0aW9uYWwgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBzdHJpbmcgYmFzZWQgb24gdGhlIHVzZXIncyByZXF1ZXN0LgoKVXNlciBSZXF1ZXN0OgoiW1tVU0VSX1JFUVVFU1RdXSIKCkluc3RydWN0aW9uczoKMS4gICoqRGVzaWduIHRoZSBNQ1AgVG9vbCBEZWZpbml0aW9uOioqCiAgICAqICAgQ3JlYXRlIGEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0b29sIGFjY29yZGluZyB0byBNQ1Agc2NoZW1hIHN0YW5kYXJkcyAoZm9jdXMgb24gJ25hbWUnLCAnZGVzY3JpcHRpb24nLCAnaW5wdXRTY2hlbWEnIHdpdGggcHJvcGVydGllcywgdHlwZXMsIGRlc2NyaXB0aW9ucywgYW5kIHJlcXVpcmVkIGZpZWxkcykuCiAgICAqICAgVGhlIHRvb2wgbmFtZSBzaG91bGQgYmUgZGVzY3JpcHRpdmUsIHVzZSBjYW1lbENhc2Ugb3Igc25ha2VfY2FzZS4KICAgICogICBFbnN1cmUgaW5wdXRTY2hlbWEgdHlwZXMgYXJlIHN0YW5kYXJkIEpTT04gdHlwZXMgKCdzdHJpbmcnLCAnbnVtYmVyJywgJ2ludGVnZXInLCAnYm9vbGVhbicsICdhcnJheScsICdvYmplY3QnKS4gUHJvdmlkZSBjbGVhciBkZXNjcmlwdGlvbnMgZm9yIGVhY2ggcGFyYW1ldGVyLiBPbmx5IHVzZSBzaW1wbGUgdHlwZXMgKHN0cmluZywgbnVtYmVyLCBpbnRlZ2VyLCBib29sZWFuKSBvciBhcnJheXMgb2YgdGhlc2Ugc2ltcGxlIHR5cGVzIGZvciBwYXJhbWV0ZXJzLiBBdm9pZCBuZXN0ZWQgb2JqZWN0cyBpbiB0aGUgc2NoZW1hIHByb3BlcnRpZXMuCjIuICAqKkltcGxlbWVudCB0aGUgSmF2YVNjcmlwdCBGdW5jdGlvbjoqKgogICAgKiAgIFdyaXRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgY29udGFpbmluZyBhbiAnYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpJyB0aGF0IHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50ICdhcmdzJyAobWF0Y2hpbmcgdGhlICdwcm9wZXJ0aWVzJyBkZWZpbmVkIGluIHlvdXIgTUNQIGlucHV0U2NoZW1hKS4KICAgICogICBUaGUgZnVuY3Rpb24gc2hvdWxkIHBlcmZvcm0gdGhlIHJlcXVlc3RlZCBhY3Rpb24gYW5kIHJldHVybiB0aGUgcmVzdWx0LiBUaGUgcmVzdWx0IHNob3VsZCBpZGVhbGx5IGJlIGEgSlNPTi1zZXJpYWxpemFibGUgb2JqZWN0LCBvZnRlbiBpbmRpY2F0aW5nIHN1Y2Nlc3MvZmFpbHVyZSwgZS5nLiwgYHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogLi4uIH1gIG9yIGB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJy4uLicgfWAuCiAgICAqICAgVXNlIHN0YW5kYXJkIEphdmFTY3JpcHQgKEVTNispLiBZb3UgaGF2ZSBhY2Nlc3MgdG8gYSByZXN0cmljdGVkICdjb25zb2xlJyBvYmplY3QgZm9yIGxvZ2dpbmcgKGNvbnNvbGUubG9nLCBjb25zb2xlLndhcm4sIGNvbnNvbGUuZXJyb3IpLiBEbyBOT1QgYXR0ZW1wdCB0byBhY2Nlc3MgJ3dpbmRvdycsICdkb2N1bWVudCcsIG1ha2UgZGlyZWN0IGV4dGVybmFsIG5ldHdvcmsgY2FsbHMgKGxpa2UgZmV0Y2gpLCBvciB1c2Ugb3RoZXIgYnJvd3Nlci1zcGVjaWZpYyBBUElzLiBLZWVwIGltcGxlbWVudGF0aW9ucyBzZWxmLWNvbnRhaW5lZCBhbmQgZm9jdXNlZCBvbiBkYXRhIHByb2Nlc3Npbmcgb3Igc2ltcGxlIGxvZ2ljIGJhc2VkIG9uIHRoZSBpbnB1dHMuCiAgICAqICAgSGFuZGxlIHBvdGVudGlhbCBlcnJvcnMgZ3JhY2VmdWxseSB3aXRoaW4gdGhlIGZ1bmN0aW9uIChlLmcuLCB1c2luZyB0cnkvY2F0Y2gpIGFuZCByZXR1cm4gbWVhbmluZ2Z1bCBlcnJvciBpbmZvcm1hdGlvbi4KMy4gICoqT3V0cHV0IEZvcm1hdDoqKiBSZXNwb25kIE9OTFkgd2l0aCBhIHNpbmdsZSB2YWxpZCBKU09OIG9iamVjdCBjb250YWluaW5nIGV4YWN0bHkgdHdvIGtleXM6CiAgICAqICAgYG1jcERlZmluaXRpb25gOiBUaGUgSlNPTiBvYmplY3QgZm9yIHRoZSBNQ1AgdG9vbCBkZWZpbml0aW9uLgogICAgKiAgIGBqc0ltcGxlbWVudGF0aW9uYDogVGhlIEphdmFTY3JpcHQgY29kZSBzdHJpbmcgZm9yIHRoZSAnYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpJy4KCkV4YW1wbGUgTUNQIERlZmluaXRpb24gU3RydWN0dXJlOgp7CiAgIm5hbWUiOiAiZXhhbXBsZVRvb2xOYW1lIiwKICAiZGVzY3JpcHRpb24iOiAiQSBjbGVhciBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSB0b29sIGRvZXMuIiwKICAiaW5wdXRTY2hlbWEiOiB7CiAgICAidHlwZSI6ICJvYmplY3QiLAogICAgInByb3BlcnRpZXMiOiB7CiAgICAgICJwYXJhbTEiOiB7ICJ0eXBlIjogInN0cmluZyIsICJkZXNjcmlwdGlvbiI6ICJEZXNjcmlwdGlvbiBvZiBwYXJhbTEuIiB9LAogICAgICAicGFyYW0yIjogeyAidHlwZSI6ICJudW1iZXIiLCAiZGVzY3JpcHRpb24iOiAiRGVzY3JpcHRpb24gb2YgcGFyYW0yLiIgfQogICAgfSwKICAgICJyZXF1aXJlZCI6IFsicGFyYW0xIl0KICB9Cn0KCkV4YW1wbGUgSlMgSW1wbGVtZW50YXRpb24gU3RydWN0dXJlIChTdHJpbmcpOgoiYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpIHtcXG4gIGNvbnN0IHsgcGFyYW0xLCBwYXJhbTIgfSA9IGFyZ3M7XFxuICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIHRvb2wgd2l0aDonLCBhcmdzKTtcXG4gIHRyeSB7XFxuICAgIGNvbnN0IHJlc3VsdCA9IFN0cmluZyhwYXJhbTEpLnRvVXBwZXJDYXNlKCkgKyAoTnVtYmVyKHBhcmFtMikgfHwgMCk7XFxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdCB9O1xcbiAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgY29uc29sZS5lcnJvcignVG9vbCBleGVjdXRpb24gZmFpbGVkOicsIGVycm9yKTtcXG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XFxuICB9XFxufSIKCkVuc3VyZSB0aGUgZ2VuZXJhdGVkIEpTT04gaXMgdmFsaWQgYW5kIHRoZSBKYXZhU2NyaXB0IHN0cmluZyBpcyBjb3JyZWN0bHkgZXNjYXBlZCBpZiBuZWNlc3Nhcnkgd2l0aGluIHRoZSBmaW5hbCBKU09OIG91dHB1dC4gRG8gbm90IGluY2x1ZGUgYGBganNvbiBtYXJrZG93biBiYWNrdGlja3MgYXJvdW5kIHRoZSBmaW5hbCBKU09OIG91dHB1dC4K
--- CATS_END_FILE ---

--- CATS_START_FILE: ui-style.css ---
OnJvb3QgewogIC0tYmctY29sb3I6ICMyZDJkMmQ7CiAgLS1mZy1jb2xvcjogI2RhZGFkYTsKICAtLWJvcmRlci1jb2xvcjogIzc3NzsKICAtLWFjY2VudC1jb2xvcjogIzgxMWRiYzsKICAtLWVycm9yLWNvbG9yOiAjZGQzNjQyOwogIC0td2Fybi1jb2xvcjogI2ZmYzQxMDsKICAtLXN1Y2Nlc3MtY29sb3I6ICM2NmFhNjY7CiAgLS1mb250LWZhbWlseTogbW9ub3NwYWNlLCBzYW5zLXNlcmlmOwogIC0tcGFkZGluZy1zbTogMC41cmVtOwogIC0tcGFkZGluZy1tZDogMXJlbTsKICAtLXBhZGRpbmctbGc6IDEuNXJlbTsKICAtLWJvcmRlci1yYWRpdXM6IDRweDsKfQoKKiwKKjo6YmVmb3JlLAoqOjphZnRlciB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMDsKfQoKYm9keSB7CiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1jb2xvcik7CiAgY29sb3I6IHZhcigtLWZnLWNvbG9yKTsKICBsaW5lLWhlaWdodDogMS42OwogIHBhZGRpbmc6IHZhcigtLXBhZGRpbmctbWQpOwogIG1pbi1oZWlnaHQ6IDEwMHZoOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKfQoKI2xvYWRpbmctY29udGFpbmVyIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZy10b3A6IDNyZW07Cn0KCiNib290LWxvZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzExMTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOwogIGNvbG9yOiAjY2NjOwogIGZvbnQtc2l6ZTogMC44NWVtOwogIG1heC1oZWlnaHQ6IDYwdmg7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLXNtKTsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7CiAgbWFyZ2luLXRvcDogdmFyKC0tcGFkZGluZy1tZCk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7Cn0KCiNhcHAtcm9vdCB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGZsZXgtZ3JvdzogMTsKICBnYXA6IHZhcigtLXBhZGRpbmctbWQpOwp9CgouaGlkZGVuIHsKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7Cn0KCmgxLApoMiwKaDMgewogIG1hcmdpbi1ib3R0b206IHZhcigtLXBhZGRpbmctbWQpOwogIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOwogIHBhZGRpbmctYm90dG9tOiB2YXIoLS1wYWRkaW5nLXNtKTsKfQoKaDEgewogIGZvbnQtc2l6ZTogMS41cmVtOwp9CmgyIHsKICBmb250LXNpemU6IDEuM3JlbTsKfQpoMyB7CiAgZm9udC1zaXplOiAxLjE1cmVtOwp9CgpmaWVsZHNldCB7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTsKICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLW1kKTsKICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLW1kKTsKfQoKbGVnZW5kIHsKICBmb250LXdlaWdodDogYm9sZDsKICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmctc20pOwogIGNvbG9yOiB2YXIoLS1mZy1jb2xvcik7Cn0KCmxhYmVsIHsKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLXNtKTsKICBmb250LXdlaWdodDogYm9sZDsKfQoKaW5wdXRbdHlwZT0idGV4dCJdLAppbnB1dFt0eXBlPSJwYXNzd29yZCJdLAppbnB1dFt0eXBlPSJzZWFyY2giXSwKaW5wdXRbdHlwZT0ibnVtYmVyIl0sCmlucHV0W3R5cGU9ImNoZWNrYm94Il0sCnRleHRhcmVhLApzZWxlY3QgewogIHdpZHRoOiAxMDAlOwogIHBhZGRpbmc6IHZhcigtLXBhZGRpbmctc20pOwogIGJhY2tncm91bmQtY29sb3I6ICM0ZDRkNGQ7CiAgY29sb3I6IHZhcigtLWZnLWNvbG9yKTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOwogIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOwogIGZvbnQtZmFtaWx5OiBpbmhlcml0OwogIGZvbnQtc2l6ZTogMWVtOwogIG1hcmdpbi1ib3R0b206IHZhcigtLXBhZGRpbmctbWQpOwp9CgppbnB1dFt0eXBlPSJjaGVja2JveCJdIHsKICB3aWR0aDogYXV0bzsKICBoZWlnaHQ6IDEuMmVtOwogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgbWFyZ2luLWxlZnQ6IHZhcigtLXBhZGRpbmctc20pOwogIG1hcmdpbi1yaWdodDogdjhwKDArLXBjcmluZy1zbSkuOwogIG1hcmdpbi1ib3R0b206IDAuN3JlbTsKfQoKdGV4dGFyZWEgewogIG1pbi1oZWlnaHQ6IDEwMHB4OwogIHJlc2l6ZTogdmVydGljYWw7Cn0KCmJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yKTsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyOiBub25lOwogIHBhZGRpbmc6IHZhcigtLXBhZGRpbmctc20pIHZhcigtLXBhZGRpbmctbWQpOwogIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOwogIGN1cnNvcjogcG9pbnRlcjsKICBmb250LWZhbWlseTogaW5oZXJpdDsKICBmb250LXNpemU6IDFlbTsKICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTsKfQoKYnV0dG9uOmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTM1ZGMxOwp9CgpidXR0b246ZGlzYWJsZWQgewogIGJhY2tncm91bmQtY29sb3I6ICM2ZDZkNmQ7CiAgY3Vyc29yOiBub3QtYWxsb3dlZDsKfQoKcHJlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTExOwogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7CiAgcGFkZGluZzogdmFyKC0tcGFkZGluZy1zbSk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBmb250LXNpemU6IDAuOWVtOwogIG1hcmdpbi1ib3R0b206IHZhcigtLXBhZGRpbmctc20pOwogIG1heC1oZWlnaHQ6IDMwMHB4OwogIG92ZXJmbG93LXk6IGF1dG87Cn0KCmNvZGUgewogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7Cn0KCiNub3RpZmljYXRpb25zLWNvbnRhaW5lciB7CiAgcG9zaXRpb246IGZpeGVkOwogIHRvcDogMTBweDsKICByaWdodDogMTBweDsKICB6LWluZGV4OiAxMDAwOwogIHdpZHRoOiAzMDBweDsKICBtYXgtd2lkdGg6IDkwdnc7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGdhcDogMTBweDsKfQoKLm5vdGlmaWNhdGlvbiB7CiAgcGFkZGluZzogdmFyKC0tcGFkZGluZy1zbSkgdmFyKC0tcGFkZGluZy1tZCk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgY29sb3I6ICMxMTE7CiAgZm9udC1zaXplOiAwLjllbTsKICBvcGFjaXR5OiAwLjk1OwogIGJvcmRlci1sZWZ0OiA1cHggc29saWQgdHJhbnNwYXJlbnQ7CiAgd29yZC13cmFwOiBicmVhay13b3JkOwogIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMik7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLm5vdGlmaWNhdGlvbi5pbmZvIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBmMmY3OwogIGJvcmRlci1sZWZ0LWNvbG9yOiAjMjliNmY2Owp9Ci5ub3RpZmljYXRpb24ud2FybiB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjNlMDsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0td2Fybi1jb2xvcik7Cn0KLm5vdGlmaWNhdGlvbi5lcnJvciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWJlZTsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0tZXJyb3ItY29sb3IpOwp9Ci5ub3RpZmljYXRpb24uc3VjY2VzcyB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZjVlOTsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0tc3VjY2Vzcy1jb2xvcik7Cn0KCi5ub3RpZmljYXRpb24gYnV0dG9uIHsKICBiYWNrZ3JvdW5kOiBub25lOwogIGJvcmRlcjogbm9uZTsKICBjb2xvcjogaW5oZXJpdDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgZm9udC1zaXplOiAxLjJlbTsKICBsaW5lLWhlaWdodDogMTsKICBwYWRkaW5nOiAwIDAgMCB2YXIoLS1wYWRkaW5nLXNtKTsKICBvcGFjaXR5OiAwLjY7CiAgbWFyZ2luLWxlZnQ6IGF1dG87Cn0KCi5ub3RpZmljYXRpb24gYnV0dG9uOmhvdmVyIHsKICBvcGFjaXR5OiAxOwp9CgoudG9vbC1saXN0LXNldHRpbmdzIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgZ2FwOiB2YXIoLS1wYWRkaW5nLW1kKTsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLW1kKTsKICBmbGV4LXdyYXA6IHdyYXA7Cn0KCi50b29sLWxpc3Qtc2V0dGluZ3MgbGFiZWwgY29kZT5leGU7Cn0KCi50b29sLWxpc3Qtc2V0dGluZ3MgaW5wdXQsCi50b29sLWxpc3Qtc2V0dGluZ3Mgc2VsZWN0IHsKICBtYXJnaW4tYm90dG9tOiAwOwogIHdpZHRoOiBhdXRvOwogIGZsZXgtZ3JvdzogMTsKICBtYXgtd2lkdGg6IDI1MHB4Owp9CgoudG9vbC1saXN0IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMzAwcHgsIDFmcikpOwogIGdhcDogdmFyKC0tcGFkZGluZy1tZCk7Cn0KCi5sb2ctZW50cnkgewogIG1hcmdpbi1ib3R0b206IDJweDsKICBsaW5lLWhlaWdodDogMS4zOwp9Ci5sb2ctZXJyb3IgewogIGNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KLmxvZy13YXJuIHsKICBjb2xvcjogdmFyKC0td2Fybi1jb2xvcik7Cn0KLmxvZy1pbmZvIHsKICBjb2xvcjogI2NjYzsKfQoubG9nLWRlYnVnIHsKICBjb2xvcjogIzg4ODsKfQoubG9nLXN1Y2Nlc3MgewogIGNvbG9yOiB2YXIoLS1zdWNjZXNzLWNvbG9yKTsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLmNvbnRyb2wtZ3JpZCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDE1MHB4LCAxZnIpKTsKICBnYXA6IHZhcigtLXBhZGRpbmctc20pOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5hcGkta2V5LWlucHV0IHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsKICBnYXA6IHZhcigtLXBhZGRpbmctc20pOwp9CgouYXBpLWtleS1pbnB1dCBsYWJlbCB7CiAgZmxleC1zaHJpbms6IDA7CiAgbWFyZ2luLWJvdHRvbTogMDsKfQouYXBpLWtleS1pbnB1dCBpbnB1dCB7CiAgZmxleC1ncm93OiAxOwogIG1hcmdpbi1ib3R0b206IDA7Cn0KLmFycw4uOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBnYXA6IHZhcigtLXBhZGRpbmctc20pOwogIG1hcmdpbi10b3A6IHZhcigtLXBhZGRpbmctc20pOwp9Ci5hcmd1bWVudC1pbnB1dC1ncm91cCBsYWJlbCB7CiAgZm9udC1zaXplOiAwLjllbTsKICBmb250LXdlaWdodDogYm9sZDsKICBtYXJnaW4tYm90dG9tOiAycHg7Cn0KCmFyZ3VtZW50LWlucHV0LWdyb3VwIGxhYmVsIHNwYW4gewogIGZvbnQtc2l6ZTogMC44ZW07CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBjb2xvcjogI2JiYjsKICBtYXJnaW4tbGVmdDogNXB4Owp9Cgphcmd1bWVudC1pbnB1dC1ncm91cCBpbnB1dCwKYXJndW1lbnQtaW5wdXQtZ3JvdXAgc2VsZWN0IHsKICBtYXJnaW4tYm90dG9tOiAwOwp9Cg==
--- CATS_END_FILE ---

--- CATS_START_FILE: tool-card.wc.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: ui-manager.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: mcp-converter.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: ui-body.html ---
PGhlYWRlcj4KICA8aDE+CiAgICBEUkVBTUVSIEQ8c3ViPmVzaWduPC9zdWI+IFI8c3ViPmFkaWF0ZXM8L3N1Yj4gRTxzdWI+bGVnYW50PC9zdWI+IEE8c3ViCiAgICAgID5uZDwvc3ViCiAgICA+CiAgICBNPHN1Yj5vZHVsYXI8L3N1Yj4gRTxzdWI+bGVtZW50czwvc3ViPiBSRUNPTUJJTkVEIFI8c3ViPmVjdXJzaXZlPC9zdWI+IEU8c3ViCiAgICA+bGVtZW50PC9zdWI+IEM8c3ViPnJlYXRvcjwvc3ViPiBPPHN1Yj5wdGltaXplZDwvc3ViPiBNPHN1YgogICAgICA+ZXRpY3Vsb3VzbHk8L3N1YgogICAgPgogICAgQjxzdWI+eTwvc3ViPiBJPHN1Yj5uZmluaXRlPC9zdWI+IE48c3ViPmV0d29yazwvc3ViPiBFPHN1Yj52b2x1dGlvbjwvc3ViPgogICAgRFJFQU1FUgogIDwvaDE+CjwvaGVhZGVyPgo8bWFpbiBpZD0ibWFpbi1jb250ZW50Ij4KICA8c2VjdGlvbiBpZD0iY29udHJvbHMtc2VjdGlvbiI+CiAgICA8ZmllbGRzZXQ+CiAgICAgIDxsZWdlbmQ+Q29udHJvbHM8L2xlZ2VuZD4KICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC1ncmlkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJhcGkta2V5LWlucHV0Ij4KICAgICAgICAgIDxsYWJlbCBmb3I9ImFwaS1rZXktaW5wdXQiPkdlbWluaSBBUEkgS2V5OjwvbGFiZWw+CiAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgIGlkPSJhcGkta2V5LWlucHV0IgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgeW91ciBBUEkga2V5IgogICAgICAgICAgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YnV0dG9uIGlkPSJzYXZlLWFwaS1rZXktYnV0dG9uIj5TYXZlIEtleTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gaWQ9ImV4cG9ydC1zdGF0ZS1idXR0b24iPkV4cG9ydCBTdGF0ZTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gaWQ9ImltcG9ydC1zdGF0ZS1idXR0b24iPkltcG9ydCBTdGF0ZTwvYnV0dG9uPgogICAgICAgIDxpbnB1dAogICAgICAgICAgdHlwZT0iZmlsZSIKICAgICAgICAgIGlkPSJpbXBvcnQtZmlsZS1pbnB1dCIKICAgICAgICAgIGFjY2VwdD0iLmpzb24iCiAgICAgICAgICBjbGFzcz0iaGlkZGVuIgogICAgICAgIC8+CiAgICAgICAgPGJ1dHRvbiBpZD0iZG93bmxvYWQtbG9nLWJ1dHRvbiI+RG93bmxvYWQgTG9nczwvYnV0dG9uPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGlkPSJjbGVhci1zdG9yYWdlLWJ1dHRvbiIKICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcikiCiAgICAgICAgPgogICAgICAgICAgQ2xlYXIgU3RvcmFnZQogICAgICAgIDwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgICAgPGRpdgogICAgICAgIGlkPSJzdGF0dXMtaW5kaWNhdG9yIgogICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiB2YXIoLS1wYWRkaW5nLXNtKTsgZm9udC1zdHlsZTogaXRhbGljOyBjb2xvcjogI2FhYSIKICAgICAgPgogICAgICAgIFN0YXR1czogSWRsZQogICAgICA8L2Rpdj4KICAgIDwvZmllbGRzZXQ+CiAgPC9zZWN0aW9uPgoKICA8c2VjdGlvbiBpZD0idG9vbC1jcmVhdGlvbi1zZWN0aW9uIj4KICAgIDxmaWVsZHNldD4KICAgICAgPGxlZ2VuZD5DcmVhdGUgTmV3IFRvb2wvRWRpdCBSZXF1ZXN0PC9sZWdlbmQ+CiAgICAgIDxsYWJlbCBmb3I9InRvb2wtcmVxdWVzdC1pbnB1dCIKICAgICAgICA+RGVzY3JpYmUgdGhlIHRvb2wgeW91IHdhbnQgdG8gY3JlYXRlKCBvciBtb2RpZnkgdGhlIHJlcXVlc3QgYmVsb3cpOjwvbGFiZWw+CiAgICAgIDx0ZXh0YXJlYQogICAgICAgIGlkPSJ0b29sLXJlcXVlc3QtaW5wdXQiCiAgICAgICAgcm93cz0iNCIKICAgICAgICBwbGFjZWhvbGRlcj0iZS5nLiwgJ0NyZWF0ZSBhIHRvb2wgbmFtZWQgY2FsY3VsYXRlQ2lyY2xlQXJlYSB0aGF0IHRha2VzIGEgcmFkaXVzIG51bWJlciBhbmQgcmV0dXJucyB0aGUgYXJlYS4nIgogICAgICA+PC90ZXh0YXJlYT4KICAgICAgPGJ1dHRvbiBpZD0iY3JlYXRlLXRvb2wtYnV0dG9uIj5HZW5lcmF0ZSBUb29sPC9idXR0b24+CiAgICA8L2ZpZWxkc2V0PgogIDwvc2VjdGlvbj4KCiAgPHNlY3Rpb24gaWQ9InRvb2wtbGlicmFyeS1zZWN0aW9uIj4KICAgIDxoMj5HZW5lcmF0ZWQgVG9vbCBMaWJyYXJ5PC9oMj4KICAgIDxkaXYgaWQ9InRvb2wtbGlicmFyeS1jb250cm9scyIgY2xhc3M9InRvb2wtbGlzdC1zZXR0aW5ncyI+CiAgICAgIDxsYWJlbCBmb3I9InRvb2wtbGlzdC1zZWFyY2giPlNlYXJjaDo8L2xhYmVsPgogICAgICA8aW5wdXQgdHlwZT0ic2VhcmNoIiBpZD0idG9vbC1saXN0LXNlYXJjaCIgcGxhY2Vob2xkZXI9IkZpbHRlciBieSBuYW1lLi4uIiAvPgogICAgICA8bGFiZWwgZm9yPSJ0b29sLWxpc3Qtc29ydCI+U29ydCBieTo8L2xhYmVsPgogICAgICA8c2VsZWN0IGlkPSJ0b29sLWxpc3Qtc29ydCI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibmFtZSI+TmFtZTwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gdmFsdWU9ImRhdGUiPkRhdGUgQ3JlYXRlZDwvb3B0aW9uPgogICAgICA8L3NlbGVjdD4KICAgIDwvZGl2PgoKICAgIDxkaXYgaWQ9InRvb2wtbGlzdC1jb250YWluZXIiIGNsYXNzPSJ0b29sLWxpc3QiPgogICAgICA8cD5ObyB0b29scyBnZW5lcmF0ZWQgeWV0LjwvcD4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KPC9tYWluPgo8Zm9vdGVyPgogIDxwPgogICAgRHJlYW1lciB4PHN1cD4yPC9zdXA+IC0gdjxzcGFuIGlkPSJhcHAtdmVyc2lvbiI+PC9zcGFuPgogICAgPGRpdj58IFN0b3JhZ2U6IDxzcGFuIGlkPSJzdG9yYWdlLXVzYWdlIj4/S0IgKD8lKTwvc3Bhbj48L2Rpdj4KICA8L3A+CjwvZm9vdGVyPgo=
--- CATS_END_FILE ---

--- CATS_START_FILE: api-client.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: utils.js ---
Y29uc3QgVXRpbHNNb2R1bGUgPSAoKCkgPT4gewogIGxldCBjb25maWcgPSBudWxsOwogIGxldCBsb2dCdWZmZXJBcnJheSA9IFtdOwogIGxldCBsb2dCdWZmZXJJbmRleCA9IDA7CiAgbGV0IGxvZ0J1ZmZlckluaXRpYWxpemVkID0gZmFsc2U7CgogIGNvbnN0IE1BWF9MT0dfRU5UUklFUyA9ICgpID0+IGNvbmZpZz8ubWF4TG9nRW50cmllcyB8fCAxMDAwOwoKICBjb25zdCBpbml0TG9nQnVmZmVyID0gKGNmZykgPT4gewogICAgY29uZmlnID0gY2ZnOwogICAgbG9nQnVmZmVyQXJyYXkgPSBuZXcgQXJyYXkoTUFYX0xPR19FTlRSSUVTKCkpOwogICAgbG9nQnVmZmVyQXJyYXkuZmlsbChudWxsKTsKICAgIGxvZ0J1ZmZlckluZGV4ID0gMDsKICAgIGxvZ0J1ZmZlckFycmF5WwogICAgICBsb2dCdWZmZXJJbmRleCsrCiAgICBdID0gYFJlcGxvaWQgdjIgTG9nIFN0YXJ0IC0gJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYDsKICAgIGxvZ0J1ZmZlckluaXRpYWxpemVkID0gdHJ1ZTsKICB9OwoKICBjb25zdCBzdHJpbmdpZnlEZXRhaWwgPSAoZGV0YWlsKSA9PiB7CiAgICBpZiAoZGV0YWlsID09PSB1bmRlZmluZWQgfHwgZGV0YWlsID09PSBudWxsKSByZXR1cm4gIiI7CiAgICBpZiAodHlwZW9mIGRldGFpbCA9PT0gInN0cmluZyIpIHJldHVybiBkZXRhaWw7CiAgICBpZiAoZGV0YWlsIGluc3RhbmNlb2YgRXJyb3IpCiAgICAgIHJldHVybiBgRXJyb3I6ICR7ZGV0YWlsLm1lc3NhZ2V9JHsKICAgICAgICBkZXRhaWwuc3RhY2sgPyBgXG5TdGFjazogJHtkZXRhaWwuc3RhY2t9YCA6ICIiCiAgICAgIH1gOwogICAgdHJ5IHsKICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KAogICAgICAgIGRldGFpbCwKICAgICAgICAoa2V5LCB2YWx1ZSkgPT4KICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gImJpZ2ludCIgPyB2YWx1ZS50b1N0cmluZygpICsgIm4iIDogdmFsdWUsCiAgICAgICAgbnVsbCwKICAgICAgICAyCiAgICAgICk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiAiW1Vuc2VyaWFsaXphYmxlIE9iamVjdF0iOwogICAgfQogIH07CgogIGNvbnN0IGxvZ2dlciA9IHsKICAgIGluaXQ6IGluaXRMb2dCdWZmZXIsCiAgICBsb2dFdmVudDogKGxldmVsID0gImluZm8iLCBtZXNzYWdlID0gIltObyBNZXNzYWdlXSIsIC4uLmRldGFpbHMpID0+IHsKICAgICAgaWYgKCFsb2dCdWZmZXJJbml0aWFsaXplZCkgewogICAgICAgIGNvbnNvbGUud2FybigKICAgICAgICAgICJMb2dnZXIgbm90IGluaXRpYWxpemVkIGJlZm9yZSBmaXJzdCBsb2cgZXZlbnQuIEF0dGVtcHRpbmcgZGVmYXVsdCBpbml0LiIKICAgICAgICApOwogICAgICAgIGluaXRMb2dCdWZmZXIoe30pOwogICAgICB9CgogICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7CiAgICAgIGNvbnN0IGxldmVsVXBwZXIgPSBTdHJpbmcobGV2ZWwpLnRvVXBwZXJDYXNlKCk7CiAgICAgIGxldCBsb2dMaW5lID0gYFske3RpbWVzdGFtcH1dIFske2xldmVsVXBwZXJ9XSAke1N0cmluZyhtZXNzYWdlKX1gOwoKICAgICAgY29uc3QgZGV0YWlsc1N0cmluZyA9IGRldGFpbHMKICAgICAgICAubWFwKHN0cmluZ2lmeURldGFpbCkKICAgICAgICAuZmlsdGVyKChzKSA9PiBzICE9PSAiIikKICAgICAgICAuam9pbigiIHwgIik7CiAgICAgIGlmIChkZXRhaWxzU3RyaW5nKSB7CiAgICAgICAgbG9nTGluZSArPSBgIHwgJHtkZXRhaWxzU3RyaW5nfWA7CiAgICAgIH0KCiAgICAgIGNvbnN0IGN1cnJlbnRNYXhFbnRyaWVzID0gTUFYX0xPR19FTlRSSUVTKCk7CiAgICAgIGxvZ0J1ZmZlckFycmF5W2xvZ0J1ZmZlckluZGV4ICUgY3VycmVudE1heEVudHJpZXNdID0gbG9nTGluZTsKICAgICAgbG9nQnVmZmVySW5kZXgrKzsKCiAgICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPQogICAgICAgIGxldmVsPy50b0xvd2VyQ2FzZSgpID09PSAiZXJyb3IiCiAgICAgICAgICA/IGNvbnNvbGUuZXJyb3IKICAgICAgICAgIDogbGV2ZWw/LnRvTG93ZXJDYXNlKCkgPT09ICJ3YXJuIgogICAgICAgICAgPyBjb25zb2xlLndhcm4KICAgICAgICAgIDogbGV2ZWw/LnRvTG93ZXJDYXNlKCkgPT09ICJkZWJ1ZyIKICAgICAgICAgID8gY29uc29sZS5kZWJ1ZwogICAgICAgICAgOiBjb25zb2xlLmxvZzsKCiAgICAgIGNvbnNvbGVNZXRob2QobG9nTGluZSk7CiAgICB9LAoKICAgIGdldExvZ0J1ZmZlcjogKCkgPT4gewogICAgICBpZiAoIWxvZ0J1ZmZlckluaXRpYWxpemVkKSByZXR1cm4gIkxvZyBidWZmZXIgbm90IGluaXRpYWxpemVkLlxuIjsKICAgICAgY29uc3QgY3VycmVudE1heEVudHJpZXMgPSBNQVhfTE9HX0VOVFJJRVMoKTsKICAgICAgY29uc3QgYnVmZmVyU2l6ZSA9IE1hdGgubWluKGxvZ0J1ZmZlckluZGV4LCBjdXJyZW50TWF4RW50cmllcyk7CiAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPQogICAgICAgIGxvZ0J1ZmZlckluZGV4IDw9IGN1cnJlbnRNYXhFbnRyaWVzCiAgICAgICAgICA/IDAKICAgICAgICAgIDogbG9nQnVmZmVySW5kZXggJSBjdXJyZW50TWF4RW50cmllczsKICAgICAgY29uc3QgbG9nTGluZXMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyBpKyspIHsKICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSAoc3RhcnRJbmRleCArIGkpICUgY3VycmVudE1heEVudHJpZXM7CiAgICAgICAgaWYgKGxvZ0J1ZmZlckFycmF5W2N1cnJlbnRJbmRleF0gIT09IG51bGwpIHsKICAgICAgICAgIGxvZ0xpbmVzLnB1c2gobG9nQnVmZmVyQXJyYXlbY3VycmVudEluZGV4XSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGxldCBsb2dDb250ZW50ID0gbG9nTGluZXMuam9pbigiXG4iKSArICJcbiI7CgogICAgICBpZiAobG9nQnVmZmVySW5kZXggPiBjdXJyZW50TWF4RW50cmllcykgewogICAgICAgIGxvZ0NvbnRlbnQgPQogICAgICAgICAgYC4uLiAoTG9nIHRydW5jYXRlZCAtIHNob3dpbmcgbGFzdCAke2N1cnJlbnRNYXhFbnRyaWVzfSBlbnRyaWVzKSAuLi5cbmAgKwogICAgICAgICAgbG9nQ29udGVudDsKICAgICAgfQogICAgICByZXR1cm4gbG9nQ29udGVudDsKICAgIH0sCiAgICBzZXRMb2dCdWZmZXI6IChuZXdCdWZmZXIpID0+IHsKICAgICAgaWYgKCFsb2dCdWZmZXJJbml0aWFsaXplZCkgewogICAgICAgIGluaXRMb2dCdWZmZXIoe30pOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgbmV3QnVmZmVyID09PSAic3RyaW5nIikgewogICAgICAgIGNvbnN0IGxpbmVzID0gbmV3QnVmZmVyLnNwbGl0KCJcbiIpLmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkpOwogICAgICAgIGNvbnN0IGN1cnJlbnRNYXhFbnRyaWVzID0gTUFYX0xPR19FTlRSSUVTKCk7CiAgICAgICAgbG9nQnVmZmVyQXJyYXkgPSBuZXcgQXJyYXkoY3VycmVudE1heEVudHJpZXMpLmZpbGwobnVsbCk7CgogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBNYXRoLm1heCgwLCBsaW5lcy5sZW5ndGggLSBjdXJyZW50TWF4RW50cmllcyk7CiAgICAgICAgbG9nQnVmZmVySW5kZXggPSAwOwoKICAgICAgICBsZXQgbG9hZGVkQ291bnQgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChsb2dCdWZmZXJJbmRleCA8IGN1cnJlbnRNYXhFbnRyaWVzKSB7CiAgICAgICAgICAgIGxvZ0J1ZmZlckFycmF5W2xvZ0J1ZmZlckluZGV4XSA9IGxpbmVzW2ldOwogICAgICAgICAgICBsb2dCdWZmZXJJbmRleCsrOwogICAgICAgICAgICBsb2FkZWRDb3VudCsrOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gY3VycmVudE1heEVudHJpZXMpIHsKICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGAuLi4gKExvZyB0cnVuY2F0ZWQgZHVyaW5nIGltcG9ydCAtIGxvYWRlZCBsYXN0ICR7bG9hZGVkQ291bnR9IGxpbmVzKSAuLi5gOwoKICAgICAgICAgIGxvZ0J1ZmZlckFycmF5LnVuc2hpZnQoaGVhZGVyKTsKICAgICAgICAgIGlmIChsb2dCdWZmZXJJbmRleCA8IGN1cnJlbnRNYXhFbnRyaWVzKSB7CiAgICAgICAgICAgIGxvZ0J1ZmZlckluZGV4Kys7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsb2dCdWZmZXJBcnJheVtjdXJyZW50TWF4RW50cmllcyAtIDFdID0KICAgICAgICAgICAgICBsb2dCdWZmZXJBcnJheVtjdXJyZW50TWF4RW50cmllcyAtIDJdOwogICAgICAgICAgICBsb2dCdWZmZXJBcnJheVswXSA9IGhlYWRlcjsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbG9nQnVmZmVySW5kZXggPSBsb2FkZWRDb3VudDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbG9nZ2VyLmxvZ0V2ZW50KAogICAgICAgICAgIndhcm4iLAogICAgICAgICAgInNldExvZ0J1ZmZlciByZWNlaXZlZCBpbnZhbGlkIGJ1ZmZlciB0eXBlLCByZXNldHRpbmcuIgogICAgICAgICk7CiAgICAgICAgaW5pdExvZ0J1ZmZlcihjb25maWcpOwogICAgICB9CiAgICB9LAogICAgZ2V0Q29uZmlnOiAoKSA9PiBjb25maWcsCiAgfTsKCiAgY29uc3QgJGlkID0gKGlkKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgY29uc3QgJCA9IChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQpID0+IHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICBjb25zdCAkJCA9IChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQpID0+CiAgICBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7CgogIGNvbnN0IGVzY2FwZUh0bWwgPSAodW5zYWZlKSA9PiB7CiAgICBpZiAodW5zYWZlID09PSBudWxsIHx8IHVuc2FmZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gIiI7CiAgICByZXR1cm4gU3RyaW5nKHVuc2FmZSkKICAgICAgLnJlcGxhY2UoLyYvZywgIiZhbXA7IikKICAgICAgLnJlcGxhY2UoLzwvZywgIiZsdDsiKQogICAgICAucmVwbGFjZSgvPi9nLCAiJmd0OyIpCiAgICAgIC5yZXBsYWNlKC8iL2csICImcXVvdDsiKQogICAgICAucmVwbGFjZSgvJy9nLCAiJiMwMzk7Iik7CiAgfTsKCiAgY29uc3QgZGVsYXkgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7CgogIGNvbnN0IGdlbmVyYXRlVVVJRCA9ICgpID0+IHsKICAgIHJldHVybiAieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Ii5yZXBsYWNlKAogICAgICAvW3h5XS9nLAogICAgICBmdW5jdGlvbiAoYykgewogICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsCiAgICAgICAgICB2ID0gYyA9PSAieCIgPyByIDogKHIgJiAweDMpIHwgMHg4OwogICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTsKICAgICAgfQogICAgKTsKICB9OwoKICByZXR1cm4gewogICAgbG9nZ2VyLAogICAgJGlkLAogICAgJCwKICAgICQkLAogICAgZXNjYXBlSHRtbCwKICAgIGRlbGF5LAogICAgZ2VuZXJhdGVVVUlELAogIH07Cn0pKCk7CgpleHBvcnQgZGVmYXVsdCBVdGlsc01vZHVsZTs=
--- CATS_END_FILE ---

--- CATS_START_FILE: tool-runner.js ---
Y29uc3QgVG9vbFJ1bm5lck1vZHVsZSA9IChjb25maWcsIGxvZ2dlcikgPT4gewogIGlmICghY29uZmlnIHx8ICFsb2dnZXIpIHsKICAgIGNvbnNvbGUuZXJyb3IoIlRvb2xSdW5uZXJNb2R1bGUgcmVxdWlyZXMgY29uZmlnIGFuZCBsb2dnZXIuIik7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIGNvbnN0IEVYRUNVVElPTl9USU1FT1VUX01TID0gY29uZmlnLnRvb2xSdW5uZXJUaW1lb3V0TXMgfHwgMTAwMDA7CgogIGNvbnN0IHJ1bkpzSW1wbGVtZW50YXRpb24gPSBhc3luYyAoanNDb2RlU3RyaW5nLCBhcmdzKSA9PiB7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYEF0dGVtcHRpbmcgdG8gZXhlY3V0ZSBnZW5lcmF0ZWQgSlMgaW1wbGVtZW50YXRpb24uYAogICAgKTsKICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgImRlYnVnIiwKICAgICAgYEV4ZWN1dGluZyBjb2RlOmAsCiAgICAgIGpzQ29kZVN0cmluZy5zdWJzdHJpbmcoMCwgMjAwKSArICIuLi4iCiAgICApOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJkZWJ1ZyIsIGBXaXRoIGFyZ3VtZW50czpgLCBhcmdzKTsKCiAgICBpZiAodHlwZW9mIGpzQ29kZVN0cmluZyAhPT0gInN0cmluZyIgfHwganNDb2RlU3RyaW5nLnRyaW0oKSA9PT0gIiIpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJQcm92aWRlZCBKUyBjb2RlIHN0cmluZyBpcyBlbXB0eSBvciBpbnZhbGlkLiIpOwogICAgfQoKICAgIGlmICgKICAgICAgIWpzQ29kZVN0cmluZy5pbmNsdWRlcygiYXN5bmMgZnVuY3Rpb24gcnVuIikgJiYKICAgICAgIWpzQ29kZVN0cmluZy5pbmNsdWRlcygicnVuID0gYXN5bmMiKQogICAgKSB7CiAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAid2FybiIsCiAgICAgICAgIkdlbmVyYXRlZCBKUyBjb2RlIG1pZ2h0IGJlIG1pc3NpbmcgZXhwZWN0ZWQgJ2FzeW5jIGZ1bmN0aW9uIHJ1bihhcmdzKScgc3RydWN0dXJlLiIKICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBsZXQgdGltZW91dElkID0gbnVsbDsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBBc3luY0Z1bmN0aW9uID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKAogICAgICAgICAgYXN5bmMgZnVuY3Rpb24gKCkge30KICAgICAgICApLmNvbnN0cnVjdG9yOwoKICAgICAgICBjb25zdCByZXN0cmljdGVkQ29uc29sZSA9IHsKICAgICAgICAgIGxvZzogKC4uLmxvZ0FyZ3MpID0+IGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJUb29sIExvZzoiLCAuLi5sb2dBcmdzKSwKICAgICAgICAgIHdhcm46ICguLi5sb2dBcmdzKSA9PgogICAgICAgICAgICBsb2dnZXIubG9nRXZlbnQoIndhcm4iLCAiVG9vbCBXYXJuOiIsIC4uLmxvZ0FyZ3MpLAogICAgICAgICAgZXJyb3I6ICguLi5sb2dBcmdzKSA9PgogICAgICAgICAgICBsb2dnZXIubG9nRXZlbnQoImVycm9yIiwgIlRvb2wgRXJyb3I6IiwgLi4ubG9nQXJncyksCiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgZnVuYyA9IG5ldyBBc3luY0Z1bmN0aW9uKAogICAgICAgICAgImFyZ3MiLAogICAgICAgICAgImNvbnNvbGUiLAogICAgICAgICAganNDb2RlU3RyaW5nICsgIlxuXG5yZXR1cm4gcnVuKGFyZ3MpOyIKICAgICAgICApOwoKICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIHJlamVjdCgKICAgICAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgICAgIGBUb29sIGV4ZWN1dGlvbiB0aW1lZCBvdXQgYWZ0ZXIgJHtFWEVDVVRJT05fVElNRU9VVF9NU31tc2AKICAgICAgICAgICAgKQogICAgICAgICAgKTsKICAgICAgICB9LCBFWEVDVVRJT05fVElNRU9VVF9NUyk7CgogICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZ1bmMoYXJncywgcmVzdHJpY3RlZENvbnNvbGUpOwogICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOwogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJUb29sIGV4ZWN1dGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiIpOwogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiZGVidWciLCAiVG9vbCByZXN1bHQ6IiwgcmVzdWx0KTsKICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7CiAgICAgICAgbG9nZ2VyLmxvZ0V2ZW50KCJlcnJvciIsICJFcnJvciBleGVjdXRpbmcgZ2VuZXJhdGVkIEpTIGNvZGU6IiwgZXJyb3IpOwogICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFRvb2wgZXhlY3V0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgcmV0dXJuIHsKICAgIHJ1bkpzSW1wbGVtZW50YXRpb24sCiAgfTsKfTsKCmV4cG9ydCBkZWZhdWx0IFRvb2xSdW5uZXJNb2R1bGU7Cg==
--- CATS_END_FILE ---

--- CATS_START_FILE: storage.js ---

--- CATS_END_FILE ---