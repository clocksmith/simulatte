aW1wb3J0IFV0aWxzIGZyb20gIi4vdXRpbHMuanMiOwppbXBvcnQgU3RvcmFnZU1vZHVsZSBmcm9tICIuL3N0b3JhZ2UuanMiOwoKY29uc3QgYm9vdHN0cmFwID0gYXN5bmMgKCkgPT4gewogIGNvbnN0IGxvYWRpbmdDb250YWluZXIgPSBVdGlscy4kaWQoImxvYWRpbmctY29udGFpbmVyIik7CiAgY29uc3QgYm9vdExvZyA9IFV0aWxzLiRpZCgiYm9vdC1sb2ciKTsKICBjb25zdCBhcHBSb290ID0gVXRpbHMuJGlkKCJhcHAtcm9vdCIpOwoKICBjb25zdCBsb2dUb0Jvb3RTY3JlZW4gPSAobGV2ZWwsIG1lc3NhZ2UsIC4uLmRldGFpbHMpID0+IHsKICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTsKICAgIGNvbnN0IGxpbmUgPSBgWyR7dGltZXN0YW1wfV0gWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dICR7bWVzc2FnZX0gJHtkZXRhaWxzCiAgICAgIC5tYXAoKGQpID0+IEpTT04uc3RyaW5naWZ5KGQpKQogICAgICAuam9pbigiICIpfVxuYDsKICAgIGlmIChib290TG9nKSB7CiAgICAgIGJvb3RMb2cudGV4dENvbnRlbnQgKz0gbGluZTsKICAgICAgYm9vdExvZy5zY3JvbGxUb3AgPSBib290TG9nLnNjcm9sbEhlaWdodDsKICAgIH0KCiAgICBjb25zdCBjb25zb2xlTWV0aG9kID0KICAgICAgbGV2ZWwgPT09ICJlcnJvciIKICAgICAgICA/IGNvbnNvbGUuZXJyb3IKICAgICAgICA6IGxldmVsID09PSAid2FybiIKICAgICAgICA/IGNvbnNvbGUud2FybgogICAgICAgIDogY29uc29sZS5sb2c7CiAgICBjb25zb2xlTWV0aG9kKGxpbmUudHJpbSgpKTsKICB9OwoKICBsZXQgY29uZmlnID0gbnVsbDsKICBsZXQgc3RvcmFnZSA9IG51bGw7CiAgbGV0IGxvZ2dlciA9IG51bGw7CgogIHRyeSB7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCAiQm9vdCBzZXF1ZW5jZSBzdGFydGVkLi4uIik7CgogICAgbG9nVG9Cb290U2NyZWVuKCJpbmZvIiwgIkZldGNoaW5nIGNvbmZpZ3VyYXRpb24uLi4iKTsKICAgIGNvbnN0IGNvbmZpZ1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2goImNvbmZpZy5qc29uIik7CiAgICBpZiAoIWNvbmZpZ1Jlc3BvbnNlLm9rKQogICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBjb25maWcuanNvbjogJHtjb25maWdSZXNwb25zZS5zdGF0dXN9YCk7CiAgICBjb25maWcgPSBhd2FpdCBjb25maWdSZXNwb25zZS5qc29uKCk7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCBgQ29uZmlndXJhdGlvbiBsb2FkZWQgKHYke2NvbmZpZy52ZXJzaW9ufSlgKTsKCiAgICBVdGlscy5sb2dnZXIuaW5pdChjb25maWcpOwogICAgbG9nZ2VyID0gVXRpbHMubG9nZ2VyOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlV0aWxpdGllcyBhbmQgTG9nZ2VyIGluaXRpYWxpemVkLiIpOwoKICAgIHN0b3JhZ2UgPSBTdG9yYWdlTW9kdWxlKGNvbmZpZywgbG9nZ2VyKTsKICAgIGlmICghc3RvcmFnZSkgdGhyb3cgbmV3IEVycm9yKCJTdG9yYWdlIG1vZHVsZSBpbml0aWFsaXphdGlvbiBmYWlsZWQuIik7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiU3RvcmFnZSBtb2R1bGUgaW5pdGlhbGl6ZWQuIik7CiAgICBjb25zdCB1c2FnZSA9IHN0b3JhZ2UuZ2V0U3RvcmFnZVVzYWdlKCk7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYEluaXRpYWwgc3RvcmFnZSB1c2FnZTogJHsodXNhZ2UudXNlZCAvIDEwMjQpLnRvRml4ZWQoCiAgICAgICAgMQogICAgICApfUtCICgke3VzYWdlLnBlcmNlbnQudG9GaXhlZCgxKX0lKWAKICAgICk7CgogICAgbGV0IHN0YXRlID0gc3RvcmFnZS5nZXRTdGF0ZSgpOwogICAgaWYgKHN0YXRlKSB7CiAgICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBjb25maWcudmVyc2lvbikgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAgICJ3YXJuIiwKICAgICAgICAgIGBTdGF0ZSB2ZXJzaW9uIG1pc21hdGNoIChTdGF0ZTogJHtzdGF0ZS52ZXJzaW9ufSwgQ29uZmlnOiAke2NvbmZpZy52ZXJzaW9ufSkuIFJlLWluaXRpYWxpemluZyBzdGF0ZS5gCiAgICAgICAgKTsKICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgc3RvcmFnZS5yZW1vdmVTdGF0ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsIGBFeGlzdGluZyBzdGF0ZSBmb3VuZCAodiR7c3RhdGUudmVyc2lvbn0pLmApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICAgImluZm8iLAogICAgICAgICJObyBleGlzdGluZyBzdGF0ZSBmb3VuZC4gSW5pdGlhbGl6aW5nIG5ldyBzdGF0ZS4iCiAgICAgICk7CiAgICB9CgogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIkxvYWRpbmcgY29yZSBhcHBsaWNhdGlvbiBtb2R1bGVzLi4uIik7CgogICAgY29uc3QgU3RhdGVNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi9zdGF0ZS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBzdG9yYWdlCiAgICApOwogICAgY29uc3QgQXBpQ2xpZW50ID0gKGF3YWl0IGltcG9ydCgiLi9hcGktY2xpZW50LmpzIikpLmRlZmF1bHQoY29uZmlnLCBsb2dnZXIpOwogICAgY29uc3QgTUNQQ29udmVydGVyID0gKGF3YWl0IGltcG9ydCgiLi9tY3AtY29udmVydGVyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyCiAgICApOwogICAgY29uc3QgVG9vbFJ1bm5lciA9IChhd2FpdCBpbXBvcnQoIi4vdG9vbC1ydW5uZXIuanMiKSkuZGVmYXVsdCgKICAgICAgY29uZmlnLAogICAgICBsb2dnZXIKICAgICk7CiAgICBjb25zdCBDeWNsZUxvZ2ljID0gKGF3YWl0IGltcG9ydCgiLi9jeWNsZS1bG9naWMuanMiKSkuZGVmYXVsdCgKICAgICAgY29uZmlnLAogICAgICBsb2dnZXIsCiAgICAgIFV0aWxzLAogICAgICBzdG9yYWdlLAogICAgICBTdGF0ZU1hbmFnZXIsCiAgICAgIEFwaUNsaWVudCwKICAgICAgTUNQQ29udmVydGVyLAogICAgICBUb29sUnVubmVyCiAgICApOwogICAgY29uc3QgVUlNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi91aS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBVdGlscywKICAgICAgc3RvcmFnZSwKICAgICAgU3RhdGVNYW5hZ2VyLAogICAgICBDeWNsZUxvZ2ljCiAgICApOwoKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJDb3JlIG1vZHVsZXMgbG9hZGVkLiIpOwoKICAgIFN0YXRlTWFuYWdlci5pbml0KHN0YXRlKTsKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJTdGF0ZU1hbmFnZXIgaW5pdGlhbGl6ZWQuIik7CgogICAgQ3ljbGVMb2dpYy5pbml0KCk7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQ3ljbGVMb2dpYyBpbml0aWFsaXplZC4iKTsKCiAgICBhd2FpdCBVSU1hbmFnZXIuaW5pdCgpOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlVJTWFuYWdlciBpbml0aWFsaXplZC4iKTsKCiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQm9vdHN0cmFwIGNvbXBsZXRlLiBMYXVuY2hpbmcgYXBwbGljYXRpb24uIik7CiAgICBpZiAobG9hZGluZ0NvbnRhaW5lcikgbG9hZGluZ0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKICAgIGlmIChhcHBSb290KSBhcHBSb290LmNsYXNzTGlzdC5yZW1vdmUoImhpZGRlbiIpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zdCBlcnJvck1zZyA9IGBGQVRBTCBCT09UU1RSQVAgRVJST1I6ICR7ZXJyb3IubWVzc2FnZX1gOwogICAgbG9nVG9Cb290U2NyZWVuKCJlcnJvciIsIGVycm9yTXNnLCBlcnJvci5zdGFjayk7CgogICAgaWYgKGJvb3RMb2cpIHsKICAgICAgYm9vdExvZy5zdHlsZS5jb2xvciA9ICJ2YXIoLS1lcnJvci1jb2xvcikiOwogICAgICBib290TG9nLnN0eWxlLmJvcmRlckNvbG9yID0gInZhcigtLWVycm9yLWNvbG9yKSI7CiAgICB9CiAgICBpZiAoYXBwUm9vdCkgYXBwUm9vdC5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKCiAgICBpZiAoIWJvb3RMb2cgJiYgbG9hZGluZ0NvbnRhaW5lcikgewogICAgICBsb2FkaW5nQ29udGFpbmVyLmlubmVySFRNTCA9IGA8aDEgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7Ij5Jbml0aWFsaXphdGlvbiBGYWlsZWQ8L2gxPjxwcmUgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7IHRleHQtYWxpZ246IGxlZnQ7IHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsiPiR7ZXJyb3JNc2d9XG4kewogICAgICAgIGVycm9yLnN0YWNrIHx8ICIiCiAgICAgIH08L3ByZT5gOwogICAgfQogIH0KfTsKCmJvb3RzdHJhcCgpOwo=