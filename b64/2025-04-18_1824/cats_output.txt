
--- CATS_START_FILE: boot.js ---
aW1wb3J0IFV0aWxzIGZyb20gIi4vdXRpbHMuanMiOwppbXBvcnQgU3RvcmFnZU1vZHVsZSBmcm9tICIuL3N0b3JhZ2UuanMiOwoKY29uc3QgYm9vdHN0cmFwID0gYXN5bmMgKCkgPT4gewogIGNvbnN0IGxvYWRpbmdDb250YWluZXIgPSBVdGlscy4kaWQoImxvYWRpbmctY29udGFpbmVyIik7CiAgY29uc3QgYm9vdExvZyA9IFV0aWxzLiRpZCgiYm9vdC1sb2ciKTsKICBjb25zdCBhcHBSb290ID0gVXRpbHMuJGlkKCJhcHAtcm9vdCIpOwoKICBjb25zdCBsb2dUb0Jvb3RTY3JlZW4gPSAobGV2ZWwsIG1lc3NhZ2UsIC4uLmRldGFpbHMpID0+IHsKICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTsKICAgIGNvbnN0IGxpbmUgPSBgWyR7dGltZXN0YW1wfV0gWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dICR7bWVzc2FnZX0gJHtkZXRhaWxzCiAgICAgIC5tYXAoKGQpID0+IEpTT04uc3RyaW5naWZ5KGQpKQogICAgICAuam9pbigiICIpfVxuYDsKICAgIGlmIChib290TG9nKSB7CiAgICAgIGJvb3RMb2cudGV4dENvbnRlbnQgKz0gbGluZTsKICAgICAgYm9vdExvZy5zY3JvbGxUb3AgPSBib290TG9nLnNjcm9sbEhlaWdodDsKICAgIH0KCiAgICBjb25zdCBjb25zb2xlTWV0aG9kID0KICAgICAgbGV2ZWwgPT09ICJlcnJvciIKICAgICAgICA/IGNvbnNvbGUuZXJyb3IKICAgICAgICA6IGxldmVsID09PSAid2FybiIKICAgICAgICA/IGNvbnNvbGUud2FybgogICAgICAgIDogY29uc29sZS5sb2c7CiAgICBjb25zb2xlTWV0aG9kKGxpbmUudHJpbSgpKTsKICB9OwoKICBsZXQgY29uZmlnID0gbnVsbDsKICBsZXQgc3RvcmFnZSA9IG51bGw7CiAgbGV0IGxvZ2dlciA9IG51bGw7CgogIHRyeSB7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCAiQm9vdCBzZXF1ZW5jZSBzdGFydGVkLi4uIik7CgogICAgbG9nVG9Cb290U2NyZWVuKCJpbmZvIiwgIkZldGNoaW5nIGNvbmZpZ3VyYXRpb24uLi4iKTsKICAgIGNvbnN0IGNvbmZpZ1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2goImNvbmZpZy5qc29uIik7CiAgICBpZiAoIWNvbmZpZ1Jlc3BvbnNlLm9rKQogICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBjb25maWcuanNvbjogJHtjb25maWdSZXNwb25zZS5zdGF0dXN9YCk7CiAgICBjb25maWcgPSBhd2FpdCBjb25maWdSZXNwb25zZS5qc29uKCk7CiAgICBsb2dUb0Jvb3RTY3JlZW4oImluZm8iLCBgQ29uZmlndXJhdGlvbiBsb2FkZWQgKHYke2NvbmZpZy52ZXJzaW9ufSlgKTsKCiAgICBVdGlscy5sb2dnZXIuaW5pdChjb25maWcpOwogICAgbG9nZ2VyID0gVXRpbHMubG9nZ2VyOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlV0aWxpdGllcyBhbmQgTG9nZ2VyIGluaXRpYWxpemVkLiIpOwoKICAgIHN0b3JhZ2UgPSBTdG9yYWdlTW9kdWxlKGNvbmZpZywgbG9nZ2VyKTsKICAgIGlmICghc3RvcmFnZSkgdGhyb3cgbmV3IEVycm9yKCJTdG9yYWdlIG1vZHVsZSBpbml0aWFsaXphdGlvbiBmYWlsZWQuIik7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiU3RvcmFnZSBtb2R1bGUgaW5pdGlhbGl6ZWQuIik7CiAgICBjb25zdCB1c2FnZSA9IHN0b3JhZ2UuZ2V0U3RvcmFnZVVzYWdlKCk7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYEluaXRpYWwgc3RvcmFnZSB1c2FnZTogJHsodXNhZ2UudXNlZCAvIDEwMjQpLnRvRml4ZWQoCiAgICAgICAgMQogICAgICApfUtCICgke3VzYWdlLnBlcmNlbnQudG9GaXhlZCgxKX0lKWAKICAgICk7CgogICAgbGV0IHN0YXRlID0gc3RvcmFnZS5nZXRTdGF0ZSgpOwogICAgaWYgKHN0YXRlKSB7CiAgICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBjb25maWcudmVyc2lvbikgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAgICJ3YXJuIiwKICAgICAgICAgIGBTdGF0ZSB2ZXJzaW9uIG1pc21hdGNoIChTdGF0ZTogJHtzdGF0ZS52ZXJzaW9ufSwgQ29uZmlnOiAke2NvbmZpZy52ZXJzaW9ufSkuIFJlLWluaXRpYWxpemluZyBzdGF0ZS5gCiAgICAgICAgKTsKICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgc3RvcmFnZS5yZW1vdmVTdGF0ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsIGBFeGlzdGluZyBzdGF0ZSBmb3VuZCAodiR7c3RhdGUudmVyc2lvbn0pLmApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICAgImluZm8iLAogICAgICAgICJObyBleGlzdGluZyBzdGF0ZSBmb3VuZC4gSW5pdGlhbGl6aW5nIG5ldyBzdGF0ZS4iCiAgICAgICk7CiAgICB9CgogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIkxvYWRpbmcgY29yZSBhcHBsaWNhdGlvbiBtb2R1bGVzLi4uIik7CgogICAgY29uc3QgU3RhdGVNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi9zdGF0ZS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBzdG9yYWdlCiAgICApOwogICAgY29uc3QgQXBpQ2xpZW50ID0gKGF3YWl0IGltcG9ydCgiLi9hcGktY2xpZW50LmpzIikpLmRlZmF1bHQoY29uZmlnLCBsb2dnZXIpOwogICAgY29uc3QgTUNQQ29udmVydGVyID0gKGF3YWl0IGltcG9ydCgiLi9tY3AtY29udmVydGVyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyCiAgICApOwoKICAgIGNvbnN0IFRvb2xSdW5uZXIgPSAoYXdhaXQgaW1wb3J0KCIuL3Rvb2wtcnVubmVyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyCiAgICApOwogICAgY29uc3QgQ3ljbGVMb2dpYyA9IChhd2FpdCBpbXBvcnQoIi4vY3ljbGUtbG9naWMuanMiKSkuZGVmYXVsdCgKICAgICAgY29uZmlnLAogICAgICBsb2dnZXIsCiAgICAgIFV0aWxzLAogICAgICBzdG9yYWdlLAogICAgICBTdGF0ZU1hbmFnZXIsCiAgICAgIEFwaUNsaWVudCwKICAgICAgTUNQQ29udmVydGVyLAogICAgICBUb29sUnVubmVyCiAgICApOwogICAgY29uc3QgVUlNYW5hZ2VyID0gKGF3YWl0IGltcG9ydCgiLi91aS1tYW5hZ2VyLmpzIikpLmRlZmF1bHQoCiAgICAgIGNvbmZpZywKICAgICAgbG9nZ2VyLAogICAgICBVdGlscywKICAgICAgc3RvcmFnZSwKICAgICAgU3RhdGVNYW5hZ2VyLAogICAgICBDeWNsZUxvZ2ljCiAgICApOwoKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJDb3JlIG1vZHVsZXMgbG9hZGVkLiIpOwoKICAgIFN0YXRlTWFuYWdlci5pbml0KHN0YXRlKTsKICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJTdGF0ZU1hbmFnZXIgaW5pdGlhbGl6ZWQuIik7CgogICAgQ3ljbGVMb2dpYy5pbml0KCk7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQ3ljbGVMb2dpYyBpbml0aWFsaXplZC4iKTsKCiAgICBhd2FpdCBVSU1hbmFnZXIuaW5pdCgpOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIlVJTWFuYWdlciBpbml0aWFsaXplZC4iKTsKCiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCAiQm9vdHN0cmFwIGNvbXBsZXRlLiBMYXVuY2hpbmcgYXBwbGljYXRpb24uIik7CiAgICBpZiAobG9hZGluZ0NvbnRhaW5lcikgbG9hZGluZ0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKICAgIGlmIChhcHBSb290KSBhcHBSb290LmNsYXNzTGlzdC5yZW1vdmUoImhpZGRlbiIpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zdCBlcnJvck1zZyA9IGBGQVRBTCBCT09UU1RSQVAgRVJST1I6ICR7ZXJyb3IubWVzc2FnZX1gOwogICAgbG9nVG9Cb290U2NyZWVuKCJlcnJvciIsIGVycm9yTXNnLCBlcnJvci5zdGFjayk7CgogICAgaWYgKGJvb3RMb2cpIHsKICAgICAgYm9vdExvZy5zdHlsZS5jb2xvciA9ICJ2YXIoLS1lcnJvci1jb2xvcikiOwogICAgICBib290TG9nLnN0eWxlLmJvcmRlckNvbG9yID0gInZhcigtLWVycm9yLWNvbG9yKSI7CiAgICB9CiAgICBpZiAoYXBwUm9vdCkgYXBwUm9vdC5jbGFzc0xpc3QuYWRkKCJoaWRkZW4iKTsKCiAgICBpZiAoIWJvb3RMb2cgJiYgbG9hZGluZ0NvbnRhaW5lcikgewogICAgICBsb2FkaW5nQ29udGFpbmVyLmlubmVySFRNTCA9IGA8aDEgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7Ij5Jbml0aWFsaXphdGlvbiBGYWlsZWQ8L2gxPjxwcmUgc3R5bGU9ImNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7IHRleHQtYWxpZ246IGxlZnQ7IHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsiPiR7ZXJyb3JNc2d9XG4kewogICAgICAgIGVycm9yLnN0YWNrIHx8ICIiCiAgICAgIH08L3ByZT5gOwogICAgfQogIH0KfTsKCmJvb3RzdHJhcCgpOwo=
--- CATS_END_FILE ---

--- CATS_START_FILE: index.html ---
PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiIC8+CiAgICA8dGl0bGU+RHJlYW1lciAoVG9vbCBGYWN0b3J5KTwvdGl0bGU+CiAgICA8bGluawogICAgICByZWw9Imljb24iCiAgICAgIGhyZWY9ImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMTAwIDEwMCclM0UlM0NyZWN0IHdpZHRoPScxMDAnIGhlaWdodD0nMTAwJyByeD0nMTUnIGZpbGw9JyUyM2NjYycvJTNFJTNDcGF0aCBkPSdNMzAgNzAgTDUwIDMwIEw3MCA3MCBaJyBmaWxsPSclMjMzMzMnLyUzRSUzQ3BhdGggZD0nTTQwIDYwIEw2MCA2MCBMNTAgNDUgWicgZmlsbD0nJTIzZmZmJy8lM0UlM0Mvc3ZnJTNFIgogICAgLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0idWktc3R5bGUuY3NzIiAvPgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxkaXYgaWQ9ImxvYWRpbmctY29udGFpbmVyIj4KICAgICAgPGgxPkxvYWRpbmcgRFJFQU1FUi4uLjwvaDE+CiAgICAgIDxwcmUgaWQ9ImJvb3QtbG9nIj48L3ByZT4KICAgIDwvZGl2PgogICAgPGRpdiBpZD0iYXBwLXJvb3QiIGNsYXNzPSJoaWRkZW4iPjwvZGl2PgogICAgPGRpdiBpZD0ibm90aWZpY2F0aW9ucy1jb250YWluZXIiPjwvZGl2PgoKICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9ImJvb3QuanMiPjwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=
--- CATS_END_FILE ---

--- CATS_START_FILE: state-manager.js ---
Y29uc3QgU3RhdGVNYW5hZ2VyTW9kdWxlID0gKGNvbmZpZywgbG9nZ2VyLCBzdG9yYWdlKSA9PiB7CiAgaWYgKCFjb25maWcgfHwgIWxvZ2dlciB8fCAhc3RvcmFnZSkgewogICAgbG9nZ2VyPy5sb2dFdmVudCgKICAgICAgImVycm9yIiwKICAgICAgIlN0YXRlTWFuYWdlciByZXF1aXJlcyBjb25maWcsIGxvZ2dlciwgYW5kIHN0b3JhZ2UuIgogICAgKTsKICAgIHJldHVybiBudWxsOwogIH0KCiAgbGV0IHN0YXRlID0gbnVsbDsKICBsZXQgaXNJbml0aWFsaXplZCA9IGZhbHNlOwoKICBjb25zdCBnZXREZWZhdWx0U3RhdGUgPSAoKSA9PiAoewogICAgdmVyc2lvbjogY29uZmlnLnZlcnNpb24sCiAgICBhcGlLZXk6ICIiLAogICAgdG9vbHM6IHt9LAogICAgbGFzdEVycm9yOiBudWxsLAogICAgc3RhdHM6IHsKICAgICAgdG9vbHNHZW5lcmF0ZWQ6IDAsCiAgICAgIGN5Y2xlc1J1bjogMCwKICAgICAgYXBpQ2FsbHM6IDAsCiAgICAgIGVycm9yczogMCwKICAgIH0sCiAgfSk7CgogIGNvbnN0IHZhbGlkYXRlU3RhdGUgPSAobG9hZGVkU3RhdGUpID0+IHsKICAgIGlmICghbG9hZGVkU3RhdGUgfHwgdHlwZW9mIGxvYWRlZFN0YXRlICE9PSAib2JqZWN0IikgcmV0dXJuIGZhbHNlOwogICAgaWYgKGxvYWRlZFN0YXRlLnZlcnNpb24gIT09IGNvbmZpZy52ZXJzaW9uKSB7CiAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAid2FybiIsCiAgICAgICAgYFN0YXRlIHZlcnNpb24gbWlzbWF0Y2guIExvYWRlZDogJHtsb2FkZWRTdGF0ZS52ZXJzaW9ufSwgRXhwZWN0ZWQ6ICR7Y29uZmlnLnZlcnNpb259LiBEaXNjYXJkaW5nIGxvYWRlZCBzdGF0ZS5gCiAgICAgICk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBpZiAodHlwZW9mIGxvYWRlZFN0YXRlLnRvb2xzICE9PSAib2JqZWN0IiB8fCBsb2FkZWRTdGF0ZS50b29scyA9PT0gbnVsbCkKICAgICAgcmV0dXJuIGZhbHNlOwogICAgaWYgKHR5cGVvZiBsb2FkZWRTdGF0ZS5zdGF0cyAhPT0gIm9iamVjdCIgfHwgbG9hZGVkU3RhdGUuc3RhdHMgPT09IG51bGwpCiAgICAgIHJldHVybiBmYWxzZTsKCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICBjb25zdCBpbml0ID0gKGluaXRpYWxTdGF0ZUZyb21TdG9yYWdlID0gbnVsbCkgPT4gewogICAgaWYgKGlzSW5pdGlhbGl6ZWQpIHsKICAgICAgbG9nZ2VyLmxvZ0V2ZW50KCJ3YXJuIiwgIlN0YXRlTWFuYWdlciBpbml0IGNhbGxlZCBtdWx0aXBsZSB0aW1lcy4iKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgbG9nZ2VyLmxvZ0V2ZW50KCJpbmZvIiwgIkluaXRpYWxpemluZyBTdGF0ZU1hbmFnZXIuLi4iKTsKCiAgICBpZiAoaW5pdGlhbFN0YXRlRnJvbVN0b3JhZ2UgJiYgdmFsaWRhdGVTdGF0ZShpbml0aWFsU3RhdGVGcm9tU3RvcmFnZSkpIHsKICAgICAgc3RhdGUgPSBpbml0aWFsU3RhdGVGcm9tU3RvcmFnZTsKICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7CiAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAiaW5mbyIsCiAgICAgICAgYFN0YXRlTWFuYWdlciBpbml0aWFsaXplZCB3aXRoIGV4aXN0aW5nIHN0YXRlIHYke3N0YXRlLnZlcnNpb259YAogICAgICApOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGluaXRpYWxTdGF0ZUZyb21TdG9yYWdlKSB7CiAgICAgICAgbG9nZ2VyLmxvZ0V2ZW50KAogICAgICAgICAgIndhcm4iLAogICAgICAgICAgIkludmFsaWQgaW5pdGlhbCBzdGF0ZSBwcm92aWRlZCBvciB2YWxpZGF0aW9uIGZhaWxlZC4gSW5pdGlhbGl6aW5nIHdpdGggZGVmYXVsdC4iCiAgICAgICAgKTsKICAgICAgfQogICAgICBzdGF0ZSA9IGdldERlZmF1bHRTdGF0ZSgpOwogICAgICBpc0luaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgbG9nZ2VyLmxvZ0V2ZW50KAogICAgICAgICJpbmZvIiwKICAgICAgICBgU3RhdGVNYW5hZ2VyIGluaXRpYWxpemVkIHdpdGggZGVmYXVsdCBzdGF0ZSB2JHtzdGF0ZS52ZXJzaW9ufWAKICAgICAgKTsKICAgICAgc2F2ZVN0YXRlKCk7CiAgICB9CiAgfTsKCiAgY29uc3QgZ2V0U3RhdGUgPSAoKSA9PiB7CiAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHsKICAgICAgbG9nZ2VyLmxvZ0V2ZW50KAogICAgICAgICJlcnJvciIsCiAgICAgICAgIkF0dGVtcHRlZCB0byBnZXQgc3RhdGUgYmVmb3JlIFN0YXRlTWFuYWdlciBpbml0aWFsaXplZC4iCiAgICAgICk7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIHN0YXRlOwogIH07CgogIGNvbnN0IHVwZGF0ZVN0YXRlID0gKG5ld1N0YXRlKSA9PiB7CiAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcigiU3RhdGVNYW5hZ2VyIG5vdCBpbml0aWFsaXplZC4iKTsKICAgIGlmICghdmFsaWRhdGVTdGF0ZShuZXdTdGF0ZSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJBdHRlbXB0ZWQgdG8gc2V0IGludmFsaWQgc3RhdGUuIik7CiAgICB9CiAgICBzdGF0ZSA9IG5ld1N0YXRlOwogIH07CgogIGNvbnN0IHNhdmVTdGF0ZSA9ICgpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgdHJ5IHsKICAgICAgc3RvcmFnZS5zYXZlU3RhdGUoc3RhdGUpOwogICAgICBsb2dnZXIubG9nRXZlbnQoImRlYnVnIiwgIlN0YXRlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgbG9nZ2VyLmxvZ0V2ZW50KCJlcnJvciIsICJGYWlsZWQgdG8gc2F2ZSBzdGF0ZSB0byBzdG9yYWdlLiIsIGUpOwogICAgICBzdGF0ZS5sYXN0RXJyb3IgPSBgRmFpbGVkIHRvIHNhdmUgc3RhdGU6ICR7ZS5tZXNzYWdlfWA7CiAgICB9CiAgfTsKCiAgY29uc3QgYWRkVG9vbCA9ICgKICAgIHRvb2xJZCwKICAgIG1jcERlZmluaXRpb24sCiAgICBqc0ltcGxlbWVudGF0aW9uLAogICAgdG9vbE1ldGFkYXRhID0ge30KICApID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgaWYgKCFzdGF0ZS50b29scykgc3RhdGUudG9vbHMgPSB7fTsKICAgIGlmIChzdGF0ZS50b29sc1t0b29sSWRdKSB7CiAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAid2FybiIsCiAgICAgICAgYE92ZXJ3cml0aW5nIGV4aXN0aW5nIHRvb2wgZGVmaW5pdGlvbiBmb3IgSUQ6ICR7dG9vbElkfWAKICAgICAgKTsKICAgIH0KICAgIGlmICgKICAgICAgIW1jcERlZmluaXRpb24gfHwKICAgICAgdHlwZW9mIG1jcERlZmluaXRpb24gIT09ICJvYmplY3QiIHx8CiAgICAgICFtY3BEZWZpbml0aW9uLm5hbWUKICAgICkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgTUNQIGRlZmluaXRpb24gcHJvdmlkZWQgZm9yIHRvb2wgSUQ6ICR7dG9vbElkfWApOwogICAgfQogICAgaWYgKHR5cGVvZiBqc0ltcGxlbWVudGF0aW9uICE9PSAic3RyaW5nIiB8fCBqc0ltcGxlbWVudGF0aW9uLmxlbmd0aCA9PT0gMCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgYEludmFsaWQgSlMgaW1wbGVtZW50YXRpb24gcHJvdmlkZWQgZm9yIHRvb2wgSUQ6ICR7dG9vbElkfWAKICAgICAgKTsKICAgIH0KCiAgICBzdGF0ZS50b29sc1t0b29sSWRdID0gewogICAgICBpZDogdG9vbElkLAogICAgICBtY3BEZWZpbml0aW9uOiBtY3BEZWZpbml0aW9uLAogICAgICBqc0ltcGxlbWVudGF0aW9uOiBqc0ltcGxlbWVudGF0aW9uLAogICAgICBtZXRhZGF0YTogewogICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLAogICAgICAgIGNyZWF0ZWRCeTogIkxMTSIsCiAgICAgICAgdmVyc2lvbjogdG9vbE1ldGFkYXRhLnZlcnNpb24gfHwgIjEuMC4wIiwKICAgICAgICBkZXNjcmlwdGlvbjogbWNwRGVmaW5pdGlvbi5kZXNjcmlwdGlvbiB8fCAiKE5vIGRlc2NyaXB0aW9uKSIsCiAgICAgICAgbmFtZTogbWNwRGVmaW5pdGlvbi5uYW1lLAogICAgICAgIC4uLnRvb2xNZXRhZGF0YSwKICAgICAgfSwKICAgIH07CiAgICBzdGF0ZS5zdGF0cy50b29sc0dlbmVyYXRlZCA9IChzdGF0ZS5zdGF0cy50b29sc0dlbmVyYXRlZCB8fCAwKSArIDE7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYFRvb2wgYWRkZWQvdXBkYXRlZDogJHt0b29sSWR9ICgke21jcERlZmluaXRpb24ubmFtZX0pYAogICAgKTsKICAgIHNhdmVTdGF0ZSgpOwogIH07CgogIGNvbnN0IGdldFRvb2wgPSAodG9vbElkKSA9PiB7CiAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHJldHVybiBudWxsOwogICAgcmV0dXJuIHN0YXRlLnRvb2xzPy5bdG9vbElkXSA/PyBudWxsOwogIH07CgogIGNvbnN0IGxpc3RUb29scyA9ICgpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgcmV0dXJuIFtdOwogICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc3RhdGUudG9vbHMgfHwge30pOwogIH07CgogIGNvbnN0IGRlbGV0ZVRvb2wgPSAodG9vbElkKSA9PiB7CiAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcigiU3RhdGVNYW5hZ2VyIG5vdCBpbml0aWFsaXplZC4iKTsKICAgIGlmIChzdGF0ZS50b29scyAmJiBzdGF0ZS50b29sc1t0b29sSWRdKSB7CiAgICAgIGRlbGV0ZSBzdGF0ZS50b29sc1t0b29sSWRdOwogICAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCBgVG9vbCBkZWxldGVkOiAke3Rvb2xJZH1gKTsKICAgICAgc2F2ZVN0YXRlKCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgbG9nZ2VyLmxvZ0V2ZW50KCJ3YXJuIiwgYEF0dGVtcHRlZCB0byBkZWxldGUgbm9uLWV4aXN0ZW50IHRvb2w6ICR7dG9vbElkfWApOwogICAgcmV0dXJuIGZhbHNlOwogIH07CgogIGNvbnN0IHNldEFwaUtleSA9IChrZXkpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgaWYgKHR5cGVvZiBrZXkgIT09ICJzdHJpbmciKSByZXR1cm47CiAgICBzdGF0ZS5hcGlLZXkgPSBrZXk7CiAgICBsb2dnZXIubG9nRXZlbnQoImluZm8iLCBgQVBJIEtleSAke2tleSA/ICJzZXQiIDogImNsZWFyZWQifSBpbiBzdGF0ZS5gKTsKICB9OwoKICBjb25zdCBpbmNyZW1lbnRDeWNsZSA9ICgpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgc3RhdGUuc3RhdHMuY3ljbGVzUnVuID0gKHN0YXRlLnN0YXRzLmN5Y2xlc1J1biB8fCAwKSArIDE7CiAgfTsKCiAgY29uc3QgaW5jcmVtZW50QXBpQ2FsbCA9ICgpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgc3RhdGUuc3RhdHMuYXBpQ2FsbHMgPSAoc3RhdGUuc3RhdHMuYXBpQ2FsbHMgfHwgMCkgKyAxOwogIH07CgogIGNvbnN0IGluY3JlbWVudEVycm9yQ291bnQgPSAoKSA9PiB7CiAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcigiU3RhdGVNYW5hZ2VyIG5vdCBpbml0aWFsaXplZC4iKTsKICAgIHN0YXRlLnN0YXRzLmVycm9ycyA9IChzdGF0ZS5zdGF0cy5lcnJvcnMgfHwgMCkgKyAxOwogIH07CgogIGNvbnN0IHNldExhc3RFcnJvciA9IChlcnJvck1lc3NhZ2UpID0+IHsKICAgIGlmICghaXNJbml0aWFsaXplZCkgdGhyb3cgbmV3IEVycm9yKCJTdGF0ZU1hbmFnZXIgbm90IGluaXRpYWxpemVkLiIpOwogICAgc3RhdGUubGFzdEVycm9yID0gZXJyb3JNZXNzYWdlOwogIH07CgogIHJldHVybiB7CiAgICBpbml0LAogICAgZ2V0U3RhdGUsCiAgICB1cGRhdGVTdGF0ZSwKICAgIHNhdmVTdGF0ZSwKICAgIGFkZFRvb2wsCiAgICBnZXRUb29sLAogICAgbGlzdFRvb2xzLAogICAgZGVsZXRlVG9vbCwKICAgIHNldEFwaUtleSwKICAgIGluY3JlbWVudEN5Y2xlLAogICAgaW5jcmVtZW50QXBpQ2FsbCwKICAgIGluY3JlbWVudEVycm9yQ291bnQsCiAgICBzZXRMYXN0RXJyb3IsCiAgICBpc0luaXRpYWxpemVkOiAoKSA9PiBpc0luaXRpYWxpemVkLAogIH07Cn07CgpleHBvcnQgZGVmYXVsdCBTdGF0ZU1hbmFnZXJNb2R1bGU7Cg==
--- CATS_END_FILE ---

--- CATS_START_FILE: config.json ---
ewogICJhcHBOYW1lIjogIkRyZWFtZXIgVG9vbCBGYWN0b3J5IChEVEYpIiwKICAidmVyc2lvbiI6ICIxLjAuMCIsCiAgInN0b3JhZ2VQcmVmaXgiOiAiX2R0Zl8iLAogICJzdGF0ZUtleUJhc2UiOiAiZHRmX3N0YXRlX3YiLAogICJzZXNzaW9uS2V5QmFzZSI6ICJkdGZfc2Vzc2lvbl92IiwKICAibWF4TG9nRW50cmllcyI6IDEwMDAwLAogICJtYXhBcnRpZmFjdFNpemVCeXRlcyI6IDQxOTQzMDQsCiAgImRlZmF1bHRNb2RlbCI6ICJnZW1pbmktMi41LXByby1leHAtMDMtMjUiLAogICJnZW1pbmlBcGlCYXNlVXJsIjogImh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9tb2RlbHMvIiwKICAiYXBpUmV0cnlEZWxheUJhc2VNcyI6IDE1MDAsCiAgImFwaU1heFJldHJpZXMiOiAyLAogICJ0b29sUnVubmVyVGltZW91dE1zIjogMTUwMDAsCiAgImRlZmF1bHRQcm9tcHRBcnRpZmFjdElkIjogInByb21wdC50b29sLWdlbmVyYXRvci5kZWZhdWx0IiwKICAic3RvcmFnZVF1b3RhQnl0ZXMiOiA1MjQyODgwLAogICJzdG9yYWdlUXVvdGFXYXJuVGhyZXNob2xkIjogMC45Cn0K
--- CATS_END_FILE ---

--- CATS_START_FILE: prompt-tool-generator.txt ---
WW91IGFyZSBhbiBleHBlcnQgdG9vbCBkZXNpZ25lciBhbmQgSmF2YVNjcmlwdCBkZXZlbG9wZXIuIFlvdXIgdGFzayBpcyB0byBjcmVhdGUgQk9USCBhIHZhbGlkIE1DUCAoTW9kZWwgQ29udGV4dCBQcm90b2NvbCkgdG9vbCBkZWZpbml0aW9uIEpTT04gb2JqZWN0IEFORCBhIGZ1bmN0aW9uYWwgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBzdHJpbmcgYmFzZWQgb24gdGhlIHVzZXIncyByZXF1ZXN0LgoKVXNlciBSZXF1ZXN0OgoiW1tVU0VSX1JFUVVFU1RdXSIKCkluc3RydWN0aW9uczoKMS4gICoqRGVzaWduIHRoZSBNQ1AgVG9vbCBEZWZpbml0aW9uOioqCiAgICAqICAgQ3JlYXRlIGEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB0b29sIGFjY29yZGluZyB0byBNQ1Agc2NoZW1hIHN0YW5kYXJkcyAoZm9jdXMgb24gJ25hbWUnLCAnZGVzY3JpcHRpb24nLCAnaW5wdXRTY2hlbWEnIHdpdGggcHJvcGVydGllcywgdHlwZXMsIGRlc2NyaXB0aW9ucywgYW5kIHJlcXVpcmVkIGZpZWxkcykuCiAgICAqICAgVGhlIHRvb2wgbmFtZSBzaG91bGQgYmUgZGVzY3JpcHRpdmUsIHVzZSBjYW1lbENhc2Ugb3Igc25ha2VfY2FzZS4KICAgICogICBFbnN1cmUgaW5wdXRTY2hlbWEgdHlwZXMgYXJlIHN0YW5kYXJkIEpTT04gdHlwZXMgKCdzdHJpbmcnLCAnbnVtYmVyJywgJ2ludGVnZXInLCAnYm9vbGVhbicsICdhcnJheScsICdvYmplY3QnKS4gUHJvdmlkZSBjbGVhciBkZXNjcmlwdGlvbnMgZm9yIGVhY2ggcGFyYW1ldGVyLiBPbmx5IHVzZSBzaW1wbGUgdHlwZXMgKHN0cmluZywgbnVtYmVyLCBpbnRlZ2VyLCBib29sZWFuKSBvciBhcnJheXMgb2YgdGhlc2Ugc2ltcGxlIHR5cGVzIGZvciBwYXJhbWV0ZXJzLiBBdm9pZCBuZXN0ZWQgb2JqZWN0cyBpbiB0aGUgc2NoZW1hIHByb3BlcnRpZXMuCjIuICAqKkltcGxlbWVudCB0aGUgSmF2YVNjcmlwdCBGdW5jdGlvbjoqKgogICAgKiAgIFdyaXRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgY29udGFpbmluZyBhbiAnYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpJyB0aGF0IHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50ICdhcmdzJyAobWF0Y2hpbmcgdGhlICdwcm9wZXJ0aWVzJyBkZWZpbmVkIGluIHlvdXIgTUNQIGlucHV0U2NoZW1hKS4KICAgICogICBUaGUgZnVuY3Rpb24gc2hvdWxkIHBlcmZvcm0gdGhlIHJlcXVlc3RlZCBhY3Rpb24gYW5kIHJldHVybiB0aGUgcmVzdWx0LiBUaGUgcmVzdWx0IHNob3VsZCBpZGVhbGx5IGJlIGEgSlNPTi1zZXJpYWxpemFibGUgb2JqZWN0LCBvZnRlbiBpbmRpY2F0aW5nIHN1Y2Nlc3MvZmFpbHVyZSwgZS5nLiwgYHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogLi4uIH1gIG9yIGB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJy4uLicgfWAuCiAgICAqICAgVXNlIHN0YW5kYXJkIEphdmFTY3JpcHQgKEVTNispLiBZb3UgaGF2ZSBhY2Nlc3MgdG8gYSByZXN0cmljdGVkICdjb25zb2xlJyBvYmplY3QgZm9yIGxvZ2dpbmcgKGNvbnNvbGUubG9nLCBjb25zb2xlLndhcm4sIGNvbnNvbGUuZXJyb3IpLiBEbyBOT1QgYXR0ZW1wdCB0byBhY2Nlc3MgJ3dpbmRvdycsICdkb2N1bWVudCcsIG1ha2UgZGlyZWN0IGV4dGVybmFsIG5ldHdvcmsgY2FsbHMgKGxpa2UgZmV0Y2gpLCBvciB1c2Ugb3RoZXIgYnJvd3Nlci1zcGVjaWZpYyBBUElzLiBLZWVwIGltcGxlbWVudGF0aW9ucyBzZWxmLWNvbnRhaW5lZCBhbmQgZm9jdXNlZCBvbiBkYXRhIHByb2Nlc3Npbmcgb3Igc2ltcGxlIGxvZ2ljIGJhc2VkIG9uIHRoZSBpbnB1dHMuCiAgICAqICAgSGFuZGxlIHBvdGVudGlhbCBlcnJvcnMgZ3JhY2VmdWxseSB3aXRoaW4gdGhlIGZ1bmN0aW9uIChlLmcuLCB1c2luZyB0cnkvY2F0Y2gpIGFuZCByZXR1cm4gbWVhbmluZ2Z1bCBlcnJvciBpbmZvcm1hdGlvbi4KMy4gICoqT3V0cHV0IEZvcm1hdDoqKiBSZXNwb25kIE9OTFkgd2l0aCBhIHNpbmdsZSB2YWxpZCBKU09OIG9iamVjdCBjb250YWluaW5nIGV4YWN0bHkgdHdvIGtleXM6CiAgICAqICAgYG1jcERlZmluaXRpb25gOiBUaGUgSlNPTiBvYmplY3QgZm9yIHRoZSBNQ1AgdG9vbCBkZWZpbml0aW9uLgogICAgKiAgIGBqc0ltcGxlbWVudGF0aW9uYDogVGhlIEphdmFTY3JpcHQgY29kZSBzdHJpbmcgZm9yIHRoZSAnYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpJy4KCkV4YW1wbGUgTUNQIERlZmluaXRpb24gU3RydWN0dXJlOgp7CiAgIm5hbWUiOiAiZXhhbXBsZVRvb2xOYW1lIiwKICAiZGVzY3JpcHRpb24iOiAiQSBjbGVhciBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSB0b29sIGRvZXMuIiwKICAiaW5wdXRTY2hlbWEiOiB7CiAgICAidHlwZSI6ICJvYmplY3QiLAogICAgInByb3BlcnRpZXMiOiB7CiAgICAgICJwYXJhbTEiOiB7ICJ0eXBlIjogInN0cmluZyIsICJkZXNjcmlwdGlvbiI6ICJEZXNjcmlwdGlvbiBvZiBwYXJhbTEuIiB9LAogICAgICAicGFyYW0yIjogeyAidHlwZSI6ICJudW1iZXIiLCAiZGVzY3JpcHRpb24iOiAiRGVzY3JpcHRpb24gb2YgcGFyYW0yLiIgfQogICAgfSwKICAgICJyZXF1aXJlZCI6IFsicGFyYW0xIl0KICB9Cn0KCkV4YW1wbGUgSlMgSW1wbGVtZW50YXRpb24gU3RydWN0dXJlIChTdHJpbmcpOgoiYXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpIHtcXG4gIGNvbnN0IHsgcGFyYW0xLCBwYXJhbTIgfSA9IGFyZ3M7XFxuICBjb25zb2xlLmxvZygnRXhlY3V0aW5nIHRvb2wgd2l0aDonLCBhcmdzKTtcXG4gIHRyeSB7XFxuICAgIGNvbnN0IHJlc3VsdCA9IFN0cmluZyhwYXJhbTEpLnRvVXBwZXJDYXNlKCkgKyAoTnVtYmVyKHBhcmFtMikgfHwgMCk7XFxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdCB9O1xcbiAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgY29uc29sZS5lcnJvcignVG9vbCBleGVjdXRpb24gZmFpbGVkOicsIGVycm9yKTtcXG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XFxuICB9XFxufSIKCkVuc3VyZSB0aGUgZ2VuZXJhdGVkIEpTT04gaXMgdmFsaWQgYW5kIHRoZSBKYXZhU2NyaXB0IHN0cmluZyBpcyBjb3JyZWN0bHkgZXNjYXBlZCBpZiBuZWNlc3Nhcnkgd2l0aGluIHRoZSBmaW5hbCBKU09OIG91dHB1dC4gRG8gbm90IGluY2x1ZGUgYGBganNvbiBtYXJrZG93biBiYWNrdGlja3MgYXJvdW5kIHRoZSBmaW5hbCBKU09OIG91dHB1dC4K
--- CATS_END_FILE ---

--- CATS_START_FILE: ui-style.css ---
OnJvb3QgewogIC0tYmctY29sb3I6ICMyZDJkMmQ7CiAgLS1mZy1jb2xvcjogI2RhZGFkYTsKICAtLWJvcmRlci1jb2xvcjogIzc3NzsKICAtLWFjY2VudC1jb2xvcjogIzgxMWRiYzsKICAtLWVycm9yLWNvbG9yOiAjZGQzNjQyOwogIC0td2Fybi1jb2xvcjogI2ZmYzQxMDsKICAtLXN1Y2Nlc3MtY29sb3I6ICM2NmFhNjY7CiAgLS1mb250LWZhbWlseTogbW9ub3NwYWNlLCBzYW5zLXNlcmlmOwogIC0tcGFkZGluZy1zbTogMC41cmVtOwogIC0tcGFkZGluZy1tZDogMXJlbTsKICAtLXBhZGRpbmctbGc6IDEuNXJlbTsKICAtLWJvcmRlci1yYWRpdXM6IDRweDsKfQoKKiwKKjo6YmVmb3JlLAoqOjphZnRlciB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMDsKfQoKYm9keSB7CiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1jb2xvcik7CiAgY29sb3I6IHZhcigtLWZnLWNvbG9yKTsKICBsaW5lLWhlaWdodDogMS42OwogIHBhZGRpbmc6IHZhcigtLXBhZGRpbmctbWQpOwogIG1pbi1oZWlnaHQ6IDEwMHZoOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKfQoKI2xvYWRpbmctY29udGFpbmVyIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZy10b3A6IDNyZW07Cn0KCiNib290LWxvZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzExMTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOwogIGNvbG9yOiAjY2NjOwogIGZvbnQtc2l6ZTogMC44NWVtOwogIG1heC1oZWlnaHQ6IDYwdmg7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLXNtKTsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsKICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7CiAgbWFyZ2luLXRvcDogdmFyKC0tcGFkZGluZy1tZCk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7Cn0KCiNhcHAtcm9vdCB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGZsZXgtZ3JvdzogMTsKICBnYXA6IHZhcigtLXBhZGRpbmctbWQpOwp9CgouaGlkZGVuIHsKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7Cn0KCmgxLApoMiwKaDMgewogIG1hcmdpbi1ib3R0b206IHZhcigtLXBhZGRpbmctbWQpOwogIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpOwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IpOwogIHBhZGRpbmctYm90dG9tOiB2YXIoLS1wYWRkaW5nLXNtKTsKfQoKaDEgewogIGZvbnQtc2l6ZTogMS41cmVtOwp9CmgyIHsKICBmb250LXNpemU6IDEuM3JlbTsKfQpoMyB7CiAgZm9udC1zaXplOiAxLjE1cmVtOwp9CgpmaWVsZHNldCB7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTsKICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLW1kKTsKICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLW1kKTsKfQoKbGVnZW5kIHsKICBmb250LXdlaWdodDogYm9sZDsKICBwYWRkaW5nOiAwIHZhcigtLXBhZGRpbmctc20pOwogIGNvbG9yOiB2YXIoLS1mZy1jb2xvcik7Cn0KCmxhYmVsIHsKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLXNtKTsKICBmb250LXdlaWdodDogYm9sZDsKfQoKaW5wdXRbdHlwZT0idGV4dCJdLAppbnB1dFt0eXBlPSJwYXNzd29yZCJdLAp0ZXh0YXJlYSwKc2VsZWN0IHsKICB3aWR0aDogMTAwJTsKICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nLXNtKTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGQ0ZDRkOwogIGNvbG9yOiB2YXIoLS1mZy1jb2xvcik7CiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yKTsKICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsKICBmb250LWZhbWlseTogaW5oZXJpdDsKICBmb250LXNpemU6IDFlbTsKICBtYXJnaW4tYm90dG9tOiB2YXIoLS1wYWRkaW5nLW1kKTsKfQoKdGV4dGFyZWEgewogIG1pbi1oZWlnaHQ6IDEwMHB4OwogIHJlc2l6ZTogdmVydGljYWw7Cn0KCmJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yKTsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyOiBub25lOwogIHBhZGRpbmc6IHZhcigtLXBhZGRpbmctc20pIHZhcigtLXBhZGRpbmctbWQpOwogIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOwogIGN1cnNvcjogcG9pbnRlcjsKICBmb250LWZhbWlseTogaW5oZXJpdDsKICBmb250LXNpemU6IDFlbTsKICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZTsKfQoKYnV0dG9uOmhvdmVyOm5vdCg6ZGlzYWJsZWQpIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTM1ZGMxOwp9CgpidXR0b246ZGlzYWJsZWQgewogIGJhY2tncm91bmQtY29sb3I6ICM2ZDZkNmQ7CiAgY3Vyc29yOiBub3QtYWxsb3dlZDsKfQoKcHJlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTExOwogIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJvcmRlci1jb2xvcik7CiAgcGFkZGluZzogdmFyKC0tcGFkZGluZy1zbSk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgb3ZlcmZsb3cteDogYXV0bzsKICBmb250LXNpemU6IDAuOWVtOwogIG1hcmdpbi1ib3R0b206IHZhcigtLXBhZGRpbmctc20pOwogIG1heC1oZWlnaHQ6IDMwMHB4OwogIG92ZXJmbG93LXk6IGF1dG87Cn0KCmNvZGUgewogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7Cn0KCiNub3RpZmljYXRpb25zLWNvbnRhaW5lciB7CiAgcG9zaXRpb246IGZpeGVkOwogIHRvcDogMTBweDsKICByaWdodDogMTBweDsKICB6LWluZGV4OiAxMDAwOwogIHdpZHRoOiAzMDBweDsKICBtYXgtd2lkdGg6IDkwdnc7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGdhcDogMTBweDsKfQoKLm5vdGlmaWNhdGlvbiB7CiAgcGFkZGluZzogdmFyKC0tcGFkZGluZy1zbSkgdmFyKC0tcGFkZGluZy1tZCk7CiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgY29sb3I6ICMxMTE7CiAgZm9udC1zaXplOiAwLjllbTsKICBvcGFjaXR5OiAwLjk1OwogIGJvcmRlci1sZWZ0OiA1cHggc29saWQgdHJhbnNwYXJlbnQ7CiAgd29yZC13cmFwOiBicmVhay13b3JkOwogIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMik7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLm5vdGlmaWNhdGlvbi5pbmZvIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBmMmY3OwogIGJvcmRlci1sZWZ0LWNvbG9yOiAjMjliNmY2Owp9Ci5ub3RpZmljYXRpb24ud2FybiB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjNlMDsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0td2Fybi1jb2xvcik7Cn0KLm5vdGlmaWNhdGlvbi5lcnJvciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWJlZTsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0tZXJyb3ItY29sb3IpOwp9Ci5ub3RpZmljYXRpb24uc3VjY2VzcyB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2U4ZjVlOTsKICBib3JkZXItbGVmdC1jb2xvcjogdmFyKC0tc3VjY2Vzcy1jb2xvcik7Cn0KCi5ub3RpZmljYXRpb24gYnV0dG9uIHsKICBiYWNrZ3JvdW5kOiBub25lOwogIGJvcmRlcjogbm9uZTsKICBjb2xvcjogaW5oZXJpdDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgZm9udC1zaXplOiAxLjJlbTsKICBsaW5lLWhlaWdodDogMTsKICBwYWRkaW5nOiAwIDAgMCB2YXIoLS1wYWRkaW5nLXNtKTsKICBvcGFjaXR5OiAwLjY7CiAgbWFyZ2luLWxlZnQ6IGF1dG87Cn0KCi5ub3RpZmljYXRpb24gYnV0dG9uOmhvdmVyIHsKICBvcGFjaXR5OiAxOwp9CgoudG9vbC1saXN0IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMzAwcHgsIDFmcikpOwogIGdhcDogdmFyKC0tcGFkZGluZy1tZCk7Cn0KCi5sb2ctZW50cnkgewogIG1hcmdpbi1ib3R0b206IDJweDsKICBsaW5lLWhlaWdodDogMS4zOwp9Ci5sb2ctZXJyb3IgewogIGNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KLmxvZy13YXJuIHsKICBjb2xvcjogdmFyKC0td2Fybi1jb2xvcik7Cn0KLmxvZy1pbmZvIHsKICBjb2xvcjogI2NjYzsKfQoubG9nLWRlYnVnIHsKICBjb2xvcjogIzg4ODsKfQoubG9nLXN1Y2Nlc3MgewogIGNvbG9yOiB2YXIoLS1zdWNjZXNzLWNvbG9yKTsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLmNvbnRyb2wtZ3JpZCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDE1MHB4LCAxZnIpKTsKICBnYXA6IHZhcigtLXBhZGRpbmctc20pOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5hcGkta2V5LWlucHV0IHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsKICBnYXA6IHZhcigtLXBhZGRpbmctc20pOwp9CgouYXBpLWtleS1pbnB1dCBsYWJlbCB7CiAgZmxleC1zaHJpbms6IDA7CiAgbWFyZ2luLWJvdHRvbTogMDsKfQouYXBpLWtleS1pbnB1dCBpbnB1dCB7CiAgZmxleC1ncm93OiAxOwogIG1hcmdpbi1ib3R0b206IDA7Cn0K
--- CATS_END_FILE ---

--- CATS_START_FILE: tool-card.wc.js ---
aW1wb3J0IFV0aWxzIGZyb20gIi4vdXRpbHMuanMiOwoKY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwp0ZW1wbGF0ZS5pbm5lckhUTUwgPSBgCjxzdHlsZT4KICAgIDpob3N0IHsKICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ib3JkZXItY29sb3IsICM0NDQpOwogICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMsIDRweCk7CiAgICAgICAgcGFkZGluZzogdmFyKC0tcGFkZGluZy1tZCwgMXJlbSk7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzJhMmEyYTsKICAgICAgICBjb250YWluZXItdHlwZTogaW5saW5lLXNpemU7IAogICAgfQogICAgaDMgewogICAgICAgIG1hcmdpbi10b3A6IDA7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tcGFkZGluZy1zbSwgMC41cmVtKTsKICAgICAgICBmb250LXNpemU6IDEuMWVtOwogICAgICAgIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICMwMDdiZmYpOwogICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDsgCiAgICB9CiAgICAuZGVzY3JpcHRpb24gewogICAgICAgIGZvbnQtc2l6ZTogMC45ZW07CiAgICAgICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tcGFkZGluZy1tZCwgMXJlbSk7CiAgICAgICAgY29sb3I6ICNjY2M7CiAgICB9CiAgICAubWV0YWRhdGEgc3BhbiB7CiAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgZm9udC1zaXplOiAwLjhlbTsKICAgICAgICBjb2xvcjogI2FhYTsKICAgICAgICBtYXJnaW4tYm90dG9tOiAycHg7CiAgICB9CiAgICAgLm1ldGFkYXRhIHN0cm9uZyB7CiAgICAgICAgY29sb3I6ICNjY2M7CiAgICAgICAgbWluLXdpZHRoOiA4MHB4OwogICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICB9CiAgICBkZXRhaWxzIHsKICAgICAgICBtYXJnaW4tdG9wOiB2YXIoLS1wYWRkaW5nLW1kLCAxcmVtKTsKICAgICAgICBib3JkZXItdG9wOiAxcHggZGFzaGVkIHZhcigtLWJvcmRlci1jb2xvciwgIzQ0NCk7CiAgICAgICAgcGFkZGluZy10b3A6IHZhcigtLXBhZGRpbmctc20sIDAuNXJlbSk7CiAgICB9CiAgICBzdW1tYXJ5IHsKICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tcGFkZGluZy1zbSwgMC41cmVtKTsKICAgIH0KICAgIHByZSB7CiAgICAgICAgbWFyZ2luLXRvcDogdmFyKC0tcGFkZGluZy1zbSwgMC41cmVtKTsKICAgICAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7CiAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkOwogICAgICAgIG1heC1oZWlnaHQ6IDI1MHB4OyAKICAgIH0KICAgIC5hY3Rpb25zIHsKICAgICAgICBtYXJnaW4tdG9wOiB2YXIoLS1wYWRkaW5nLW1kLCAxcmVtKTsKICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tYm9yZGVyLWNvbG9yLCAjNDQ0KTsKICAgICAgICBwYWRkaW5nLXRvcDogdmFyKC0tcGFkZGluZy1tZCwgMXJlbSk7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBmbGV4LXdyYXA6IHdyYXA7IAogICAgICAgIGdhcDogdmFyKC0tcGFkZGluZy1zbSwgMC41cmVtKTsKICAgIH0KICAgIGJ1dHRvbiB7CiAgICAgICAgZm9udC1zaXplOiAwLjllbTsKICAgICAgICBwYWRkaW5nOiAwLjRyZW0gMC44cmVtOwogICAgfQogICAgLmRlbGV0ZS1idXR0b24gewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWVycm9yLWNvbG9yLCAjZGMzNTQ1KSAhaW1wb3J0YW50OyAKICAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87IAogICAgfQogICAgLmRlbGV0ZS1idXR0b246aG92ZXIgewogICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNhNzFkMmEgIWltcG9ydGFudDsKICAgIH0KCiAgICAgQGNvbnRhaW5lciAobWF4LXdpZHRoOiAzNTBweCkgewogICAgICAgICBoMyB7IGZvbnQtc2l6ZTogMWVtOyB9CiAgICAgICAgIC5kZXNjcmlwdGlvbiB7IGZvbnQtc2l6ZTogMC44NWVtOyB9CiAgICAgICAgIC5hY3Rpb25zIHsganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9IAogICAgICAgICAuZGVsZXRlLWJ1dHRvbiB7IG1hcmdpbi1sZWZ0OiAwOyB9IAogICAgIH0KCgo8L3N0eWxlPgo8aDMgaWQ9Im5hbWUiPlRvb2wgTmFtZTwvaDM+CjxwIGNsYXNzPSJkZXNjcmlwdGlvbiIgaWQ9ImRlc2NyaXB0aW9uIj5Ub29sIGRlc2NyaXB0aW9uLi4uPC9wPgo8ZGl2IGNsYXNzPSJtZXRhZGF0YSI+CiAgICA8c3Bhbj48c3Ryb25nPklEOjwvc3Ryb25nPiA8Y29kZSBpZD0idG9vbC1pZCI+dG9vbC1pZDwvY29kZT48L3NwYW4+CiAgICA8c3Bhbj48c3Ryb25nPkNyZWF0ZWQ6PC9zdHJvbmc+IDxzcGFuIGlkPSJjcmVhdGVkLWF0Ij50aW1lc3RhbXA8L3NwYW4+PC9zcGFuPgogICAgPHNwYW4+PHN0cm9uZz5WZXJzaW9uOjwvc3Ryb25nPiA8c3BhbiBpZD0idmVyc2lvbiI+MS4wLjA8L3NwYW4+PC9zcGFuPgo8L2Rpdj4KPGRldGFpbHM+CiAgICA8c3VtbWFyeT5WaWV3IERlZmluaXRpb24gKE1DUCk8L3N1bW1hcnk+CiAgICA8cHJlPjxjb2RlIGlkPSJtY3AtZGVmaW5pdGlvbiI+e308L2NvZGU+PC9wcmU+CjwvZGV0YWlscz4KPGRldGFpbHM+CiAgICA8c3VtbWFyeT5WaWV3IEltcGxlbWVudGF0aW9uIChKUyk8L3N1bW1hcnk+CiAgICA8cHJlPjxjb2RlIGlkPSJqcy1pbXBsZW1lbnRhdGlvbiI+YXN5bmMgZnVuY3Rpb24gcnVuKGFyZ3MpIHsgfTwvY29kZT48L3ByZT4KPC9kZXRhaWxzPgo8ZGl2IGNsYXNzPSJhY3Rpb25zIj4KICAgIDxidXR0b24gY2xhc3M9ImV4ZWN1dGUtYnV0dG9uIiB0aXRsZT0iRXhlY3V0ZSB0aGlzIHRvb2wiPkV4ZWN1dGU8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImRlbGV0ZS1idXR0b24iIHRpdGxlPSJEZWxldGUgdGhpcyB0b29sIHBlcm1hbmVudGx5Ij5EZWxldGU8L2J1dHRvbj4KPC9kaXY+CmA7CgpjbGFzcyBUb29sQ2FyZENvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKCk7CiAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICJvcGVuIiB9KTsKICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7CiAgICB0aGlzLl90b29sRGF0YSA9IG51bGw7CiAgfQoKICBzZXRUb29sRGF0YShkYXRhKSB7CiAgICBpZiAoCiAgICAgICFkYXRhIHx8CiAgICAgICFkYXRhLmlkIHx8CiAgICAgICFkYXRhLm1ldGFkYXRhIHx8CiAgICAgICFkYXRhLm1jcERlZmluaXRpb24gfHwKICAgICAgIWRhdGEuanNJbXBsZW1lbnRhdGlvbgogICAgKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoIkludmFsaWQgdG9vbCBkYXRhIHBhc3NlZCB0byB0b29sLWNhcmQ6IiwgZGF0YSk7CgogICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoIm5hbWUiKS50ZXh0Q29udGVudCA9ICJJbnZhbGlkIFRvb2wgRGF0YSI7CiAgICAgIHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgiZGVzY3JpcHRpb24iKS50ZXh0Q29udGVudCA9ICIiOwogICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoInRvb2wtaWQiKS50ZXh0Q29udGVudCA9IGRhdGE/LmlkIHx8ICJOL0EiOwogICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoImNyZWF0ZWQtYXQiKS50ZXh0Q29udGVudCA9ICIiOwogICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoInZlcnNpb24iKS50ZXh0Q29udGVudCA9ICIiOwogICAgICB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoIm1jcC1kZWZpbml0aW9uIikudGV4dENvbnRlbnQgPSAiIjsKICAgICAgdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCJqcy1pbXBsZW1lbnRhdGlvbiIpLnRleHRDb250ZW50ID0gIiI7CgogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLl90b29sRGF0YSA9IGRhdGE7CiAgICB0aGlzLnJlbmRlcigpOwogIH0KCiAgcmVuZGVyKCkgewogICAgaWYgKCF0aGlzLl90b29sRGF0YSkgcmV0dXJuOwoKICAgIGNvbnN0IG5hbWVFbCA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgibmFtZSIpOwogICAgY29uc3QgZGVzY0VsID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCJkZXNjcmlwdGlvbiIpOwogICAgY29uc3QgaWRFbCA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgidG9vbC1pZCIpOwogICAgY29uc3QgY3JlYXRlZEVsID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCJjcmVhdGVkLWF0Iik7CiAgICBjb25zdCB2ZXJzaW9uRWwgPSB0aGlzLnNoYWRvd1Jvb3QuZ2V0RWxlbWVudEJ5SWQoInZlcnNpb24iKTsKICAgIGNvbnN0IG1jcEVsID0gdGhpcy5zaGFkb3dSb290LmdldEVsZW1lbnRCeUlkKCJtY3AtZGVmaW5pdGlvbiIpOwogICAgY29uc3QganNFbCA9IHRoaXMuc2hhZG93Um9vdC5nZXRFbGVtZW50QnlJZCgianMtaW1wbGVtZW50YXRpb24iKTsKCiAgICBuYW1lRWwudGV4dENvbnRlbnQgPSB0aGlzLl90b29sRGF0YS5tZXRhZGF0YS5uYW1lIHx8ICIoVW5uYW1lZCBUb29sKSI7CiAgICBkZXNjRWwudGV4dENvbnRlbnQgPQogICAgICB0aGlzLl90b29sRGF0YS5tZXRhZGF0YS5kZXNjcmlwdGlvbiB8fCAiKE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkKSI7CiAgICBpZEVsLnRleHRDb250ZW50ID0gdGhpcy5fdG9vbERhdGEuaWQ7CiAgICBjcmVhdGVkRWwudGV4dENvbnRlbnQgPSB0aGlzLl90b29sRGF0YS5tZXRhZGF0YS5jcmVhdGVkQXQKICAgICAgPyBuZXcgRGF0ZSh0aGlzLl90b29sRGF0YS5tZXRhZGF0YS5jcmVhdGVkQXQpLnRvTG9jYWxlU3RyaW5nKCkKICAgICAgOiAiTi9BIjsKICAgIHZlcnNpb25FbC50ZXh0Q29udGVudCA9IHRoaXMuX3Rvb2xEYXRhLm1ldGFkYXRhLnZlcnNpb24gfHwgIk4vQSI7CgogICAgdHJ5IHsKICAgICAgbWNwRWwudGV4dENvbnRlbnQgPSBKU09OLnN0cmluZ2lmeSh0aGlzLl90b29sRGF0YS5tY3BEZWZpbml0aW9uLCBudWxsLCAyKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgbWNwRWwudGV4dENvbnRlbnQgPSBgRXJyb3IgZGlzcGxheWluZyBNQ1AgSlNPTjogJHtlLm1lc3NhZ2V9XG5cbiR7dGhpcy5fdG9vbERhdGEubWNwRGVmaW5pdGlvbn1gOwogICAgICBtY3BFbC5zdHlsZS5jb2xvciA9ICJ2YXIoLS1lcnJvci1jb2xvciwgcmVkKSI7CiAgICB9CgogICAgY29uc3QgZXNjYXBlID0gVXRpbHM/LmVzY2FwZUh0bWwgfHwgKChzdHIpID0+IHN0cik7CiAgICBqc0VsLmlubmVySFRNTCA9IGVzY2FwZSh0aGlzLl90b29sRGF0YS5qc0ltcGxlbWVudGF0aW9uKTsKICB9CgogIGNvbm5lY3RlZENhbGxiYWNrKCkgewogICAgdGhpcy5zaGFkb3dSb290CiAgICAgIC5xdWVyeVNlbGVjdG9yKCIuZGVsZXRlLWJ1dHRvbiIpCiAgICAgIC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsKICAgICAgICBpZiAodGhpcy5fdG9vbERhdGEpIHsKICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgKICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCJkZWxldGUtdG9vbCIsIHsKICAgICAgICAgICAgICBkZXRhaWw6IHsKICAgICAgICAgICAgICAgIHRvb2xJZDogdGhpcy5fdG9vbERhdGEuaWQsCiAgICAgICAgICAgICAgICB0b29sTmFtZTogdGhpcy5fdG9vbERhdGEubWV0YWRhdGEubmFtZSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsCiAgICAgICAgICAgICAgY29tcG9zZWQ6IHRydWUsCiAgICAgICAgICAgIH0pCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfSk7CgogICAgdGhpcy5zaGFkb3dSb290CiAgICAgIC5xdWVyeVNlbGVjdG9yKCIuZXhlY3V0ZS1idXR0b24iKQogICAgICAuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoKSA9PiB7CiAgICAgICAgaWYgKHRoaXMuX3Rvb2xEYXRhKSB7CiAgICAgICAgICBsZXQgYXJncyA9IHt9OwogICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLl90b29sRGF0YS5tY3BEZWZpbml0aW9uPy5pbnB1dFNjaGVtYT8ucHJvcGVydGllczsKICAgICAgICAgIGlmIChwcm9wcyAmJiBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoID4gMCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGNvbnN0IGFyZ3NTdHJpbmcgPSBwcm9tcHQoCiAgICAgICAgICAgICAgICBgRW50ZXIgYXJndW1lbnRzIGFzIEpTT04gZm9yICR7CiAgICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2xEYXRhLm1ldGFkYXRhLm5hbWUKICAgICAgICAgICAgICAgIH06XG4ke0pTT04uc3RyaW5naWZ5KAogICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykKICAgICAgICAgICAgICAgICl9XG5FeGFtcGxlOiB7InBhcmFtMSI6ICJ2YWx1ZTEiLCAuLi59YAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgaWYgKGFyZ3NTdHJpbmcgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXJncyA9IGFyZ3NTdHJpbmcudHJpbSgpID8gSlNPTi5wYXJzZShhcmdzU3RyaW5nKSA6IHt9OyAvLyBIYW5kbGUgZW1wdHkgaW5wdXQgYXMgZW1wdHkgb2JqZWN0CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBhbGVydChgSW52YWxpZCBKU09OIGlucHV0OiAke2UubWVzc2FnZX1gKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICAgIGBFeGVjdXRpbmcgJHt0aGlzLl90b29sRGF0YS5tZXRhZGF0YS5uYW1lfSB3aXRoIG5vIGFyZ3VtZW50cy5gCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KAogICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoImV4ZWN1dGUtdG9vbCIsIHsKICAgICAgICAgICAgICBkZXRhaWw6IHsKICAgICAgICAgICAgICAgIHRvb2xJZDogdGhpcy5fdG9vbERhdGEuaWQsCiAgICAgICAgICAgICAgICB0b29sTmFtZTogdGhpcy5fdG9vbERhdGEubWV0YWRhdGEubmFtZSwKICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLAogICAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLAogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0pOwogIH0KfQoKZXhwb3J0IGRlZmF1bHQgVG9vbENhcmRDb21wb25lbnQ7Cg==
--- CATS_END_FILE ---

--- CATS_START_FILE: ui-manager.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: mcp-converter.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: ui-body.html ---
PGhlYWRlcj4KICA8aDE+CiAgICBEUkVBTUVSIEQ8c3ViPmVzaWduPC9zdWI+IFI8c3ViPmFkaWF0ZXM8L3N1Yj4gRTxzdWI+bGVnYW50PC9zdWI+IEE8c3ViCiAgICAgID5uZDwvc3ViCiAgICA+CiAgICBNPHN1Yj5vZHVsYXI8L3N1Yj4gRTxzdWI+bGVtZW50czwvc3ViPiBSRUNPTUJJTkVEIFI8c3ViPmVjdXJzaXZlPC9zdWI+IEU8c3ViCiAgICA+bGVtZW50PC9zdWI+IEM8c3ViPnJlYXRvcjwvc3ViPiBPPHN1Yj5wdGltaXplZDwvc3ViPiBNPHN1YgogICAgICA+ZXRpY3Vsb3VzbHk8L3N1YgogICAgPgogICAgQjxzdWI+eTwvc3ViPiBJPHN1Yj5uZmluaXRlPC9zdWI+IE48c3ViPmV0d29yazwvc3ViPiBFPHN1Yj52b2x1dGlvbjwvc3ViPgogICAgRFJFQU1FUgogIDwvaDE+CjwvaGVhZGVyPgo8bWFpbiBpZD0ibWFpbi1jb250ZW50Ij4KICA8c2VjdGlvbiBpZD0iY29udHJvbHMtc2VjdGlvbiI+CiAgICA8ZmllbGRzZXQ+CiAgICAgIDxsZWdlbmQ+Q29udHJvbHM8L2xlZ2VuZD4KICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC1ncmlkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJhcGkta2V5LWlucHV0Ij4KICAgICAgICAgIDxsYWJlbCBmb3I9ImFwaS1rZXktaW5wdXQiPkdlbWluaSBBUEkgS2V5OjwvbGFiZWw+CiAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgIGlkPSJhcGkta2V5LWlucHV0IgogICAgICAgICAgICBwbGFjZWhvbGRlcj0iRW50ZXIgeW91ciBBUEkga2V5IgogICAgICAgICAgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YnV0dG9uIGlkPSJzYXZlLWFwaS1rZXktYnV0dG9uIj5TYXZlIEtleTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gaWQ9ImV4cG9ydC1zdGF0ZS1idXR0b24iPkV4cG9ydCBTdGF0ZTwvYnV0dG9uPgogICAgICAgIDxidXR0b24gaWQ9ImltcG9ydC1zdGF0ZS1idXR0b24iPkltcG9ydCBTdGF0ZTwvYnV0dG9uPgogICAgICAgIDxpbnB1dAogICAgICAgICAgdHlwZT0iZmlsZSIKICAgICAgICAgIGlkPSJpbXBvcnQtZmlsZS1pbnB1dCIKICAgICAgICAgIGFjY2VwdD0iLmpzb24iCiAgICAgICAgICBjbGFzcz0iaGlkZGVuIgogICAgICAgIC8+CiAgICAgICAgPGJ1dHRvbiBpZD0iZG93bmxvYWQtbG9nLWJ1dHRvbiI+RG93bmxvYWQgTG9nczwvYnV0dG9uPgogICAgICAgIDxidXR0b24KICAgICAgICAgIGlkPSJjbGVhci1zdG9yYWdlLWJ1dHRvbiIKICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcikiCiAgICAgICAgPgogICAgICAgICAgQ2xlYXIgU3RvcmFnZQogICAgICAgIDwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgICAgPGRpdgogICAgICAgIGlkPSJzdGF0dXMtaW5kaWNhdG9yIgogICAgICAgIHN0eWxlPSJtYXJnaW4tdG9wOiB2YXIoLS1wYWRkaW5nLXNtKTsgZm9udC1zdHlsZTogaXRhbGljOyBjb2xvcjogI2FhYSIKICAgICAgPgogICAgICAgIFN0YXR1czogSWRsZQogICAgICA8L2Rpdj4KICAgIDwvZmllbGRzZXQ+CiAgPC9zZWN0aW9uPgoKICA8c2VjdGlvbiBpZD0idG9vbC1jcmVhdGlvbi1zZWN0aW9uIj4KICAgIDxmaWVsZHNldD4KICAgICAgPGxlZ2VuZD5DcmVhdGUgTmV3IFRvb2w8L2xlZ2VuZD4KICAgICAgPGxhYmVsIGZvcj0idG9vbC1yZXF1ZXN0LWlucHV0IgogICAgICAgID5EZXNjcmliZSB0aGUgdG9vbCB5b3Ugd2FudCB0byBjcmVhdGU6PC9sYWJlbAogICAgICA+CiAgICAgIDx0ZXh0YXJlYQogICAgICAgIGlkPSJ0b29sLXJlcXVlc3QtaW5wdXQiCiAgICAgICAgcm93cz0iNCIKICAgICAgICBwbGFjZWhvbGRlcj0iZS5nLiwgJ0NyZWF0ZSBhIHRvb2wgbmFtZWQgY2FsY3VsYXRlQ2lyY2xlQXJlYSB0aGF0IHRha2VzIGEgcmFkaXVzIG51bWJlciBhbmQgcmV0dXJucyB0aGUgYXJlYS4nIgogICAgICA+PC90ZXh0YXJlYT4KICAgICAgPGJ1dHRvbiBpZD0iY3JlYXRlLXRvb2wtYnV0dG9uIj5HZW5lcmF0ZSBUb29sPC9idXR0b24+CiAgICA8L2ZpZWxkc2V0PgogIDwvc2VjdGlvbj4KCiAgPHNlY3Rpb24gaWQ9InRvb2wtbGlicmFyeS1zZWN0aW9uIj4KICAgIDxoMj5HZW5lcmF0ZWQgVG9vbCBMaWJyYXJ5PC9oMj4KICAgIDxkaXYgaWQ9InRvb2wtbGlzdC1jb250YWluZXIiIGNsYXNzPSJ0b29sLWxpc3QiPgogICAgICA8cD5ObyB0b29scyBnZW5lcmF0ZWQgeWV0LjwvcD4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KPC9tYWluPgo8Zm9vdGVyPgogIDxwPgogICAgRHJlYW1lciB4PHN1cD4yPC9zdXA+IC0gdjxzcGFuIGlkPSJhcHAtdmVyc2lvbiI+PHN1cD4/LjxzdXA+Py48c3VwPj8uPC9zdXA+PC9zdWI+PC9zdXA+PC9zcGFuPgogICAgPGRpdj58IFN0b3JhZ2U6IDxzcGFuIGlkPSJzdG9yYWdlLXVzYWdlIj4/S0IgKD8lKTwvc3Bhbj48L2Rpdj4KICA8L3A+CjwvZm9vdGVyPgo=
--- CATS_END_FILE ---

--- CATS_START_FILE: api-client.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: utils.js ---
Y29uc3QgVXRpbHNNb2R1bGUgPSAoKCkgPT4gewogIGxldCBjb25maWcgPSBudWxsOwogIGxldCBsb2dCdWZmZXJBcnJheSA9IFtdOwogIGxldCBsb2dCdWZmZXJJbmRleCA9IDA7CiAgbGV0IGxvZ0J1ZmZlckluaXRpYWxpemVkID0gZmFsc2U7CgogIGNvbnN0IE1BWF9MT0dfRU5UUklFUyA9ICgpID0+IGNvbmZpZz8ubWF4TG9nRW50cmllcyA/PyAxMDAwOwoKICBjb25zdCBpbml0TG9nQnVmZmVyID0gKGNmZykgPT4gewogICAgY29uZmlnID0gY2ZnOwogICAgbG9nQnVmZmVyQXJyYXkgPSBuZXcgQXJyYXkoTUFYX0xPR19FTlRSSUVTKCkpOwogICAgbG9nQnVmZmVyQXJyYXkuZmlsbChudWxsKTsKICAgIGxvZ0J1ZmZlckluZGV4ID0gMDsKICAgIGxvZ0J1ZmZlckFycmF5WwogICAgICBsb2dCdWZmZXJJbmRleCsrCiAgICBdID0gYFJlcGxvaWQgdjIgTG9nIFN0YXJ0IC0gJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYDsKICAgIGxvZ0J1ZmZlckluaXRpYWxpemVkID0gdHJ1ZTsKICB9OwoKICBjb25zdCBzdHJpbmdpZnlEZXRhaWwgPSAoZGV0YWlsKSA9PiB7CiAgICBpZiAoZGV0YWlsID09PSB1bmRlZmluZWQgfHwgZGV0YWlsID09PSBudWxsKSByZXR1cm4gIiI7CiAgICBpZiAodHlwZW9mIGRldGFpbCA9PT0gInN0cmluZyIpIHJldHVybiBkZXRhaWw7CiAgICBpZiAoZGV0YWlsIGluc3RhbmNlb2YgRXJyb3IpCiAgICAgIHJldHVybiBgRXJyb3I6ICR7ZGV0YWlsLm1lc3NhZ2V9JHsKICAgICAgICBkZXRhaWwuc3RhY2sgPyBgXG5TdGFjazogJHtkZXRhaWwuc3RhY2t9YCA6ICIiCiAgICAgIH1gOwogICAgdHJ5IHsKICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KAogICAgICAgIGRldGFpbCwKICAgICAgICAoa2V5LCB2YWx1ZSkgPT4KICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gImJpZ2ludCIgPyB2YWx1ZS50b1N0cmluZygpICsgIm4iIDogdmFsdWUsCiAgICAgICAgbnVsbCwKICAgICAgICAyCiAgICAgICk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiAiW1Vuc2VyaWFsaXphYmxlIE9iamVjdF0iOwogICAgfQogIH07CgogIGNvbnN0IGxvZ2dlciA9IHsKICAgIGluaXQ6IGluaXRMb2dCdWZmZXIsCiAgICBsb2dFdmVudDogKGxldmVsID0gImluZm8iLCBtZXNzYWdlID0gIltObyBNZXNzYWdlXSIsIC4uLmRldGFpbHMpID0+IHsKICAgICAgaWYgKCFsb2dCdWZmZXJJbml0aWFsaXplZCkgewogICAgICAgIGNvbnNvbGUud2FybigKICAgICAgICAgICJMb2dnZXIgbm90IGluaXRpYWxpemVkIGJlZm9yZSBmaXJzdCBsb2cgZXZlbnQuIEF0dGVtcHRpbmcgZGVmYXVsdCBpbml0LiIKICAgICAgICApOwogICAgICAgIGluaXRMb2dCdWZmZXIoe30pOwogICAgICB9CgogICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7CiAgICAgIGNvbnN0IGxldmVsVXBwZXIgPSBTdHJpbmcobGV2ZWwpLnRvVXBwZXJDYXNlKCk7CiAgICAgIGxldCBsb2dMaW5lID0gYFske3RpbWVzdGFtcH1dIFske2xldmVsVXBwZXJ9XSAke1N0cmluZyhtZXNzYWdlKX1gOwoKICAgICAgY29uc3QgZGV0YWlsc1N0cmluZyA9IGRldGFpbHMKICAgICAgICAubWFwKHN0cmluZ2lmeURldGFpbCkKICAgICAgICAuZmlsdGVyKChzKSA9PiBzICE9PSAiIikKICAgICAgICAuam9pbigiIHwgIik7CiAgICAgIGlmIChkZXRhaWxzU3RyaW5nKSB7CiAgICAgICAgbG9nTGluZSArPSBgIHwgJHtkZXRhaWxzU3RyaW5nfWA7CiAgICAgIH0KCiAgICAgIGNvbnN0IGN1cnJlbnRNYXhFbnRyaWVzID0gTUFYX0xPR19FTlRSSUVTKCk7CiAgICAgIGxvZ0J1ZmZlckFycmF5W2xvZ0J1ZmZlckluZGV4ICUgY3VycmVudE1heEVudHJpZXNdID0gbG9nTGluZTsKICAgICAgbG9nQnVmZmVySW5kZXgrKzsKCiAgICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPQogICAgICAgIGxldmVsPy50b0xvd2VyQ2FzZSgpID09PSAiZXJyb3IiCiAgICAgICAgICA/IGNvbnNvbGUuZXJyb3IKICAgICAgICAgIDogbGV2ZWw/LnRvTG93ZXJDYXNlKCkgPT09ICJ3YXJuIgogICAgICAgICAgPyBjb25zb2xlLndhcm4KICAgICAgICAgIDogbGV2ZWw/LnRvTG93ZXJDYXNlKCkgPT09ICJkZWJ1ZyIKICAgICAgICAgID8gY29uc29sZS5kZWJ1ZwogICAgICAgICAgOiBjb25zb2xlLmxvZzsKCiAgICAgIGNvbnNvbGVNZXRob2QobG9nTGluZSk7CiAgICB9LAoKICAgIGdldExvZ0J1ZmZlcjogKCkgPT4gewogICAgICBpZiAoIWxvZ0J1ZmZlckluaXRpYWxpemVkKSByZXR1cm4gIkxvZyBidWZmZXIgbm90IGluaXRpYWxpemVkLlxuIjsKICAgICAgY29uc3QgY3VycmVudE1heEVudHJpZXMgPSBNQVhfTE9HX0VOVFJJRVMoKTsKICAgICAgY29uc3QgYnVmZmVyU2l6ZSA9IE1hdGgubWluKGxvZ0J1ZmZlckluZGV4LCBjdXJyZW50TWF4RW50cmllcyk7CiAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPQogICAgICAgIGxvZ0J1ZmZlckluZGV4IDw9IGN1cnJlbnRNYXhFbnRyaWVzCiAgICAgICAgICA/IDAKICAgICAgICAgIDogbG9nQnVmZmVySW5kZXggJSBjdXJyZW50TWF4RW50cmllczsKICAgICAgY29uc3QgbG9nTGluZXMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJTaXplOyBpKyspIHsKICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSAoc3RhcnRJbmRleCArIGkpICUgY3VycmVudE1heEVudHJpZXM7CiAgICAgICAgaWYgKGxvZ0J1ZmZlckFycmF5W2N1cnJlbnRJbmRleF0gIT09IG51bGwpIHsKICAgICAgICAgIGxvZ0xpbmVzLnB1c2gobG9nQnVmZmVyQXJyYXlbY3VycmVudEluZGV4XSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGxldCBsb2dDb250ZW50ID0gbG9nTGluZXMuam9pbigiXG4iKSArICJcbiI7CgogICAgICBpZiAobG9nQnVmZmVySW5kZXggPiBjdXJyZW50TWF4RW50cmllcykgewogICAgICAgIGxvZ0NvbnRlbnQgPQogICAgICAgICAgYC4uLiAoTG9nIHRydW5jYXRlZCAtIHNob3dpbmcgbGFzdCAke2N1cnJlbnRNYXhFbnRyaWVzfSBlbnRyaWVzKSAuLi5cbmAgKwogICAgICAgICAgbG9nQ29udGVudDsKICAgICAgfQogICAgICByZXR1cm4gbG9nQ29udGVudDsKICAgIH0sCiAgICBzZXRMb2dCdWZmZXI6IChuZXdCdWZmZXIpID0+IHsKICAgICAgaWYgKCFsb2dCdWZmZXJJbml0aWFsaXplZCkgewogICAgICAgIGluaXRMb2dCdWZmZXIoe30pOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgbmV3QnVmZmVyID09PSAic3RyaW5nIikgewogICAgICAgIGNvbnN0IGxpbmVzID0gbmV3QnVmZmVyLnNwbGl0KCJcbiIpLmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkpOwogICAgICAgIGNvbnN0IGN1cnJlbnRNYXhFbnRyaWVzID0gTUFYX0xPR19FTlRSSUVTKCk7CiAgICAgICAgbG9nQnVmZmVyQXJyYXkgPSBuZXcgQXJyYXkoY3VycmVudE1heEVudHJpZXMpLmZpbGwobnVsbCk7CgogICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBNYXRoLm1heCgwLCBsaW5lcy5sZW5ndGggLSBjdXJyZW50TWF4RW50cmllcyk7CiAgICAgICAgbG9nQnVmZmVySW5kZXggPSAwOwoKICAgICAgICBsZXQgbG9hZGVkQ291bnQgPSAwOwogICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChsb2dCdWZmZXJJbmRleCA8IGN1cnJlbnRNYXhFbnRyaWVzKSB7CiAgICAgICAgICAgIGxvZ0J1ZmZlckFycmF5W2xvZ0J1ZmZlckluZGV4XSA9IGxpbmVzW2ldOwogICAgICAgICAgICBsb2dCdWZmZXJJbmRleCsrOwogICAgICAgICAgICBsb2FkZWRDb3VudCsrOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gY3VycmVudE1heEVudHJpZXMpIHsKICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGAuLi4gKExvZyB0cnVuY2F0ZWQgZHVyaW5nIGltcG9ydCAtIGxvYWRlZCBsYXN0ICR7bG9hZGVkQ291bnR9IGxpbmVzKSAuLi5gOwoKICAgICAgICAgIGxvZ0J1ZmZlckFycmF5LnVuc2hpZnQoaGVhZGVyKTsKICAgICAgICAgIGlmIChsb2dCdWZmZXJJbmRleCA8IGN1cnJlbnRNYXhFbnRyaWVzKSB7CiAgICAgICAgICAgIGxvZ0J1ZmZlckluZGV4Kys7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsb2dCdWZmZXJBcnJheVtjdXJyZW50TWF4RW50cmllcyAtIDFdID0KICAgICAgICAgICAgICBsb2dCdWZmZXJBcnJheVtjdXJyZW50TWF4RW50cmllcyAtIDJdOwogICAgICAgICAgICBsb2dCdWZmZXJBcnJheVswXSA9IGhlYWRlcjsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbG9nQnVmZmVySW5kZXggPSBsb2FkZWRDb3VudDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbG9nZ2VyLmxvZ0V2ZW50KAogICAgICAgICAgIndhcm4iLAogICAgICAgICAgInNldExvZ0J1ZmZlciByZWNlaXZlZCBpbnZhbGlkIGJ1ZmZlciB0eXBlLCByZXNldHRpbmcuIgogICAgICAgICk7CiAgICAgICAgaW5pdExvZ0J1ZmZlcihjb25maWcpOwogICAgICB9CiAgICB9LAogICAgZ2V0Q29uZmlnOiAoKSA9PiBjb25maWcsCiAgfTsKCiAgY29uc3QgJGlkID0gKGlkKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgY29uc3QgJCA9IChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQpID0+IHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICBjb25zdCAkJCA9IChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQpID0+CiAgICBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7CgogIGNvbnN0IGVzY2FwZUh0bWwgPSAodW5zYWZlKSA9PiB7CiAgICBpZiAodW5zYWZlID09PSBudWxsIHx8IHVuc2FmZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gIiI7CiAgICByZXR1cm4gU3RyaW5nKHVuc2FmZSkKICAgICAgLnJlcGxhY2UoLyYvZywgIiZhbXA7IikKICAgICAgLnJlcGxhY2UoLzwvZywgIiZsdDsiKQogICAgICAucmVwbGFjZSgvPi9nLCAiJmd0OyIpCiAgICAgIC5yZXBsYWNlKC8iL2csICImcXVvdDsiKQogICAgICAucmVwbGFjZSgvJy9nLCAiJiMwMzk7Iik7CiAgfTsKCiAgY29uc3QgZGVsYXkgPSAobXMpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7CgogIGNvbnN0IGdlbmVyYXRlVVVJRCA9ICgpID0+IHsKICAgIHJldHVybiAieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Ii5yZXBsYWNlKAogICAgICAvW3h5XS9nLAogICAgICBmdW5jdGlvbiAoYykgewogICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsCiAgICAgICAgICB2ID0gYyA9PSAieCIgPyByIDogKHIgJiAweDMpIHwgMHg4OwogICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTsKICAgICAgfQogICAgKTsKICB9OwoKICByZXR1cm4gewogICAgbG9nZ2VyLAogICAgJGlkLAogICAgJCwKICAgICQkLAogICAgZXNjYXBlSHRtbCwKICAgIGRlbGF5LAogICAgZ2VuZXJhdGVVVUlELAogIH07Cn0pKCk7CgpleHBvcnQgZGVmYXVsdCBVdGlsc01vZHVsZTsK
--- CATS_END_FILE ---

--- CATS_START_FILE: tool-runner.js ---
Y29uc3QgVG9vbFJ1bm5lck1vZHVsZSA9IChjb25maWcsIGxvZ2dlcikgPT4gewogIGlmICghY29uZmlnIHx8ICFsb2dnZXIpIHsKICAgIGNvbnNvbGUuZXJyb3IoIlRvb2xSdW5uZXJNb2R1bGUgcmVxdWlyZXMgY29uZmlnIGFuZCBsb2dnZXIuIik7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIGNvbnN0IEVYRUNVVElPTl9USU1FT1VUX01TID0gY29uZmlnLnRvb2xSdW5uZXJUaW1lb3V0TXMgfHwgMTAwMDA7CgogIGNvbnN0IHJ1bkpzSW1wbGVtZW50YXRpb24gPSBhc3luYyAoanNDb2RlU3RyaW5nLCBhcmdzKSA9PiB7CiAgICBsb2dnZXIubG9nRXZlbnQoCiAgICAgICJpbmZvIiwKICAgICAgYEF0dGVtcHRpbmcgdG8gZXhlY3V0ZSBnZW5lcmF0ZWQgSlMgaW1wbGVtZW50YXRpb24uYAogICAgKTsKICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgImRlYnVnIiwKICAgICAgYEV4ZWN1dGluZyBjb2RlOmAsCiAgICAgIGpzQ29kZVN0cmluZy5zdWJzdHJpbmcoMCwgMjAwKSArICIuLi4iCiAgICApOwogICAgbG9nZ2VyLmxvZ0V2ZW50KCJkZWJ1ZyIsIGBXaXRoIGFyZ3VtZW50czpgLCBhcmdzKTsKCiAgICBpZiAodHlwZW9mIGpzQ29kZVN0cmluZyAhPT0gInN0cmluZyIgfHwganNDb2RlU3RyaW5nLnRyaW0oKSA9PT0gIiIpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJQcm92aWRlZCBKUyBjb2RlIHN0cmluZyBpcyBlbXB0eSBvciBpbnZhbGlkLiIpOwogICAgfQoKICAgIGlmICgKICAgICAgIWpzQ29kZVN0cmluZy5pbmNsdWRlcygiYXN5bmMgZnVuY3Rpb24gcnVuIikgJiYKICAgICAgIWpzQ29kZVN0cmluZy5pbmNsdWRlcygicnVuID0gYXN5bmMiKQogICAgKSB7CiAgICAgIGxvZ2dlci5sb2dFdmVudCgKICAgICAgICAid2FybiIsCiAgICAgICAgIkdlbmVyYXRlZCBKUyBjb2RlIG1pZ2h0IGJlIG1pc3NpbmcgZXhwZWN0ZWQgJ2FzeW5jIGZ1bmN0aW9uIHJ1bihhcmdzKScgc3RydWN0dXJlLiIKICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBsZXQgdGltZW91dElkID0gbnVsbDsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBBc3luY0Z1bmN0aW9uID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKAogICAgICAgICAgYXN5bmMgZnVuY3Rpb24gKCkge30KICAgICAgICApLmNvbnN0cnVjdG9yOwoKICAgICAgICBjb25zdCByZXN0cmljdGVkQ29uc29sZSA9IHsKICAgICAgICAgIGxvZzogKC4uLmxvZ0FyZ3MpID0+IGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJUb29sIExvZzoiLCAuLi5sb2dBcmdzKSwKICAgICAgICAgIHdhcm46ICguLi5sb2dBcmdzKSA9PgogICAgICAgICAgICBsb2dnZXIubG9nRXZlbnQoIndhcm4iLCAiVG9vbCBXYXJuOiIsIC4uLmxvZ0FyZ3MpLAogICAgICAgICAgZXJyb3I6ICguLi5sb2dBcmdzKSA9PgogICAgICAgICAgICBsb2dnZXIubG9nRXZlbnQoImVycm9yIiwgIlRvb2wgRXJyb3I6IiwgLi4ubG9nQXJncyksCiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgZnVuYyA9IG5ldyBBc3luY0Z1bmN0aW9uKAogICAgICAgICAgImFyZ3MiLAogICAgICAgICAgImNvbnNvbGUiLAogICAgICAgICAganNDb2RlU3RyaW5nICsgIlxuXG5yZXR1cm4gcnVuKGFyZ3MpOyIKICAgICAgICApOwoKICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIHJlamVjdCgKICAgICAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgICAgIGBUb29sIGV4ZWN1dGlvbiB0aW1lZCBvdXQgYWZ0ZXIgJHtFWEVDVVRJT05fVElNRU9VVF9NU31tc2AKICAgICAgICAgICAgKQogICAgICAgICAgKTsKICAgICAgICB9LCBFWEVDVVRJT05fVElNRU9VVF9NUyk7CgogICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZ1bmMoYXJncywgcmVzdHJpY3RlZENvbnNvbGUpOwogICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOwogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiaW5mbyIsICJUb29sIGV4ZWN1dGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiIpOwogICAgICAgIGxvZ2dlci5sb2dFdmVudCgiZGVidWciLCAiVG9vbCByZXN1bHQ6IiwgcmVzdWx0KTsKICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7CiAgICAgICAgbG9nZ2VyLmxvZ0V2ZW50KCJlcnJvciIsICJFcnJvciBleGVjdXRpbmcgZ2VuZXJhdGVkIEpTIGNvZGU6IiwgZXJyb3IpOwogICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFRvb2wgZXhlY3V0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgcmV0dXJuIHsKICAgIHJ1bkpzSW1wbGVtZW50YXRpb24sCiAgfTsKfTsKCmV4cG9ydCBkZWZhdWx0IFRvb2xSdW5uZXJNb2R1bGU7Cg==
--- CATS_END_FILE ---

--- CATS_START_FILE: cycle-logic.js ---

--- CATS_END_FILE ---

--- CATS_START_FILE: storage.js ---

--- CATS_END_FILE ---
